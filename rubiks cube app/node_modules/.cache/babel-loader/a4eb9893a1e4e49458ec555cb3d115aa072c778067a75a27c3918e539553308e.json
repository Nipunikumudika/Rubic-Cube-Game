{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { Geometry, BufferGeometry } from 'three';\nimport { TessellateModifier } from 'three/examples/jsm/modifiers/TessellateModifier';\nfunction useTessellation(passes = 3, maxEdgeLength) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength));\n    }\n  }, [maxEdgeLength]);\n  useEffect(() => {\n    modifier.current.maxEdgeLength = maxEdgeLength;\n  }, [maxEdgeLength]);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new Geometry();\n      if (original.current instanceof BufferGeometry) {\n        geometry.fromBufferGeometry(original.current);\n      } else {\n        geometry = original.current.clone();\n      }\n      const bufferGeometry = new BufferGeometry();\n      for (let i = 0; i < passes; i++) {\n        modifier.current.modify(geometry);\n      }\n      const tessellated = bufferGeometry.fromGeometry(geometry);\n      ref.current.geometry = tessellated;\n    }\n  }, [maxEdgeLength, passes]);\n  return ref;\n}\nexport { useTessellation };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}