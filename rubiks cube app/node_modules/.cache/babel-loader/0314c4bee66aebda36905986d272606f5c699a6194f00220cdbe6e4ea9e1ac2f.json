{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { Suspense, useMemo, useState } from \"react\";\n// import { Canvas } from \"react-three-fiber\";\n// import { GLTFLoader } from \"three/addons/loaders/GLTFLoader\";\n// import RubiksCubeModel from \"./RubiksCubeModel\";\n// import \"./App.css\";\n// import { useLoader } from \"react-three-fiber\";\n// import { useMouseHandlers } from \"./mouseEventHandlers\";\n// import * as THREE from 'three';\n\n// const RubiksCube = () => {\n//   const { scene } = useLoader(GLTFLoader, \"/rubikcube.gltf\");\n//   const [drag, setDrag] = useState(true);\n//   const { handleMouseDown, handleMouseUp,handleMouseDownCube,set,xyzdirection,direction } = useMouseHandlers();\n//   const generateNodesSubset = useMemo(() => {\n//     const subsets = [];\n\n//     for (let i = 0; i <= 26; i++) {\n//       subsets.push(scene.children.slice(i, i + 1));\n//     }\n//     return subsets;\n//   }, [scene]);\n\n//   const handleDragChange = (newDrag) => {\n//     setDrag(newDrag);\n//   };\n\n//   return (\n//     <Canvas>\n//       <ambientLight />\n//       <Suspense fallback={null}>\n//         {generateNodesSubset.map((nodesSubset, index) => (\n//           <RubiksCubeModel\n//             index={index}\n//             key={index}\n//             nodesSubset={nodesSubset}\n//             drag={drag}\n//             onDragChange={handleDragChange}\n//             mouseDownPlane={handleMouseDown}\n//             mouseUpPlane={handleMouseUp}\n//             mouseDownCube={handleMouseDownCube}\n//             set={set}\n//             xyzdirection={xyzdirection}\n//             direction={direction}\n//           />\n//         ))}\n//       </Suspense>\n//       <pointLight position={[10, 10, 10]} />\n//     </Canvas>\n//   );\n// };\n// export default RubiksCube;\n\nimport React, { useRef, useEffect } from \"react\";\nimport { Tween } from \"tween.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RotatingCube = () => {\n  _s();\n  const cubeRef = useRef();\n  useEffect(() => {\n    const cubeRotation = {\n      x: cubeRef.current.rotation.x\n    };\n    const updateRotation = () => {\n      cubeRef.current.rotation.set(cubeRotation.x, cubeRef.current.rotation.y, cubeRef.current.rotation.z);\n    };\n    new Tween(cubeRotation).to({\n      x: cubeRotation.x + Math.PI / 2\n    }, 1000).onUpdate(updateRotation).onComplete(() => {\n      console.log(\"Rotation Completed\");\n    }).start();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: cubeRef,\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(RotatingCube, \"lBnSkOcyFiZzOF9am8AbPaeJIn4=\");\n_c = RotatingCube;\nexport default RotatingCube;\nvar _c;\n$RefreshReg$(_c, \"RotatingCube\");","map":{"version":3,"names":["React","useRef","useEffect","Tween","jsxDEV","_jsxDEV","RotatingCube","_s","cubeRef","cubeRotation","x","current","rotation","updateRotation","set","y","z","to","Math","PI","onUpdate","onComplete","console","log","start","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/App.js"],"sourcesContent":["// import React, { Suspense, useMemo, useState } from \"react\";\r\n// import { Canvas } from \"react-three-fiber\";\r\n// import { GLTFLoader } from \"three/addons/loaders/GLTFLoader\";\r\n// import RubiksCubeModel from \"./RubiksCubeModel\";\r\n// import \"./App.css\";\r\n// import { useLoader } from \"react-three-fiber\";\r\n// import { useMouseHandlers } from \"./mouseEventHandlers\";\r\n// import * as THREE from 'three';\r\n\r\n// const RubiksCube = () => {\r\n//   const { scene } = useLoader(GLTFLoader, \"/rubikcube.gltf\");\r\n//   const [drag, setDrag] = useState(true);\r\n//   const { handleMouseDown, handleMouseUp,handleMouseDownCube,set,xyzdirection,direction } = useMouseHandlers();\r\n//   const generateNodesSubset = useMemo(() => {\r\n//     const subsets = [];\r\n    \r\n\r\n//     for (let i = 0; i <= 26; i++) {\r\n//       subsets.push(scene.children.slice(i, i + 1));\r\n//     }\r\n//     return subsets;\r\n//   }, [scene]);\r\n\r\n//   const handleDragChange = (newDrag) => {\r\n//     setDrag(newDrag);\r\n//   };\r\n\r\n\r\n\r\n//   return (\r\n//     <Canvas>\r\n//       <ambientLight />\r\n//       <Suspense fallback={null}>\r\n//         {generateNodesSubset.map((nodesSubset, index) => (\r\n//           <RubiksCubeModel\r\n//             index={index}\r\n//             key={index}\r\n//             nodesSubset={nodesSubset}\r\n//             drag={drag}\r\n//             onDragChange={handleDragChange}\r\n//             mouseDownPlane={handleMouseDown}\r\n//             mouseUpPlane={handleMouseUp}\r\n//             mouseDownCube={handleMouseDownCube}\r\n//             set={set}\r\n//             xyzdirection={xyzdirection}\r\n//             direction={direction}\r\n//           />\r\n//         ))}\r\n//       </Suspense>\r\n//       <pointLight position={[10, 10, 10]} />\r\n//     </Canvas>\r\n//   );\r\n// };\r\n// export default RubiksCube;\r\n\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { Tween } from \"tween.js\";\r\n\r\nconst RotatingCube = () => {\r\n  const cubeRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const cubeRotation = { x: cubeRef.current.rotation.x };\r\n\r\n    const updateRotation = () => {\r\n      cubeRef.current.rotation.set(cubeRotation.x, cubeRef.current.rotation.y, cubeRef.current.rotation.z);\r\n    };\r\n\r\n    new Tween(cubeRotation)\r\n      .to({ x: cubeRotation.x + Math.PI / 2 }, 1000)\r\n      .onUpdate(updateRotation)\r\n      .onComplete(() => {\r\n        console.log(\"Rotation Completed\");\r\n      })\r\n      .start();\r\n  }, []);\r\n\r\n  return (\r\n    <mesh ref={cubeRef}>\r\n      <boxBufferGeometry args={[1, 1, 1]} />\r\n      <meshBasicMaterial color=\"red\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default RotatingCube;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGP,MAAM,CAAC,CAAC;EAExBC,SAAS,CAAC,MAAM;IACd,MAAMO,YAAY,GAAG;MAAEC,CAAC,EAAEF,OAAO,CAACG,OAAO,CAACC,QAAQ,CAACF;IAAE,CAAC;IAEtD,MAAMG,cAAc,GAAGA,CAAA,KAAM;MAC3BL,OAAO,CAACG,OAAO,CAACC,QAAQ,CAACE,GAAG,CAACL,YAAY,CAACC,CAAC,EAAEF,OAAO,CAACG,OAAO,CAACC,QAAQ,CAACG,CAAC,EAAEP,OAAO,CAACG,OAAO,CAACC,QAAQ,CAACI,CAAC,CAAC;IACtG,CAAC;IAED,IAAIb,KAAK,CAACM,YAAY,CAAC,CACpBQ,EAAE,CAAC;MAAEP,CAAC,EAAED,YAAY,CAACC,CAAC,GAAGQ,IAAI,CAACC,EAAE,GAAG;IAAE,CAAC,EAAE,IAAI,CAAC,CAC7CC,QAAQ,CAACP,cAAc,CAAC,CACxBQ,UAAU,CAAC,MAAM;MAChBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC,CAAC,CACDC,KAAK,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA;IAAMoB,GAAG,EAAEjB,OAAQ;IAAAkB,QAAA,gBACjBrB,OAAA;MAAmBsB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtC1B,OAAA;MAAmB2B,KAAK,EAAC;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEX,CAAC;AAACxB,EAAA,CAzBID,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AA2BlB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}