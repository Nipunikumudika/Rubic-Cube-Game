{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\rubik cube app\\\\rubiks-cube-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader';\nimport { useLoader } from 'react-three-fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RubiksCube = () => {\n  _s();\n  const [cubeState, setCubeState] = useState(createInitialCubeState());\n  const rotateFace = (faceIndex, direction) => {\n    const updatedCubeState = [...cubeState];\n\n    // Identify the nodes associated with the specified face\n    const faceNodes = updatedCubeState[faceIndex];\n\n    // Rotate the cubes in the specified face\n    faceNodes.forEach(cube => {\n      // Update the cube rotation based on the direction of rotation\n      cube.rotation.x += direction * (Math.PI / 2);\n    });\n    setCubeState(updatedCubeState);\n  };\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), cubeState.map((face, index) => /*#__PURE__*/_jsxDEV(Face, {\n      cubes: face\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => rotateFace(0, 1),\n      children: \"Rotate Top Face Clockwise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(RubiksCube, \"VgeFny5jRX/SlSHmNEHA2QqHGDI=\");\n_c = RubiksCube;\nconst Face = ({\n  cubes\n}) => {\n  return cubes.map((cube, index) => /*#__PURE__*/_jsxDEV(Cube, {\n    position: cube.position,\n    rotation: cube.rotation\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this));\n};\n_c2 = Face;\nconst Cube = ({\n  position,\n  rotation\n}) => {\n  _s2();\n  const {\n    scene\n  } = useLoader(GLTFLoader, '/rubikcube.gltf');\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: scene,\n    position: position,\n    rotation: rotation\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n_s2(Cube, \"KrIghLvv3RhOhm/RzUg6KZbU0T0=\", false, function () {\n  return [useLoader];\n});\n_c3 = Cube;\nconst createInitialCubeState = () => {\n  // Implement the logic to create the initial state of the Rubik's Cube.\n  // You need to represent the positions or rotations of each cube.\n  // Example: [{ position: [x1, y1, z1], rotation: [rx1, ry1, rz1] }, ...]\n  // You need to initialize the state based on your model's structure.\n\n  // For simplicity, let's assume a 3x3 grid for each face\n  const faceNodes = Array.from({\n    length: 3\n  }, (_, row) => Array.from({\n    length: 3\n  }, (_, col) => ({\n    position: [row - 1, col - 1, 0],\n    // Adjust positions based on your needs\n    rotation: [0, 0, 0] // Initial rotation\n  })));\n\n  // Initialize the state with 6 faces (adjust as needed)\n  return Array.from({\n    length: 6\n  }, () => [...faceNodes]);\n};\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"RubiksCube\");\n$RefreshReg$(_c2, \"Face\");\n$RefreshReg$(_c3, \"Cube\");","map":{"version":3,"names":["React","useState","Canvas","GLTFLoader","useLoader","OrbitControls","jsxDEV","_jsxDEV","RubiksCube","_s","cubeState","setCubeState","createInitialCubeState","rotateFace","faceIndex","direction","updatedCubeState","faceNodes","forEach","cube","rotation","x","Math","PI","children","fileName","_jsxFileName","lineNumber","columnNumber","map","face","index","Face","cubes","position","onClick","_c","Cube","_c2","_s2","scene","object","_c3","Array","from","length","_","row","col","$RefreshReg$"],"sources":["E:/projects/rubik cube app/rubiks-cube-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader';\nimport { useLoader } from 'react-three-fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport './App.css';\n\nconst RubiksCube = () => {\n  const [cubeState, setCubeState] = useState(createInitialCubeState());\n\n  const rotateFace = (faceIndex, direction) => {\n    const updatedCubeState = [...cubeState];\n\n    // Identify the nodes associated with the specified face\n    const faceNodes = updatedCubeState[faceIndex];\n\n    // Rotate the cubes in the specified face\n    faceNodes.forEach(cube => {\n      // Update the cube rotation based on the direction of rotation\n      cube.rotation.x += direction * (Math.PI / 2);\n    });\n\n    setCubeState(updatedCubeState);\n  };\n\n  return (\n    <Canvas>\n      <ambientLight />\n      <OrbitControls />\n      {cubeState.map((face, index) => (\n        <Face key={index} cubes={face} />\n      ))}\n      <pointLight position={[10, 10, 10]} />\n      <button onClick={() => rotateFace(0, 1)}>Rotate Top Face Clockwise</button>\n      {/* Add buttons for other face rotations */}\n    </Canvas>\n  );\n};\n\nconst Face = ({ cubes }) => {\n  return cubes.map((cube, index) => (\n    <Cube key={index} position={cube.position} rotation={cube.rotation} />\n  ));\n};\n\nconst Cube = ({ position, rotation }) => {\n  const { scene } = useLoader(GLTFLoader, '/rubikcube.gltf');\n  return <primitive object={scene} position={position} rotation={rotation} />;\n};\n\nconst createInitialCubeState = () => {\n  // Implement the logic to create the initial state of the Rubik's Cube.\n  // You need to represent the positions or rotations of each cube.\n  // Example: [{ position: [x1, y1, z1], rotation: [rx1, ry1, rz1] }, ...]\n  // You need to initialize the state based on your model's structure.\n\n  // For simplicity, let's assume a 3x3 grid for each face\n  const faceNodes = Array.from({ length: 3 }, (_, row) =>\n    Array.from({ length: 3 }, (_, col) => ({\n      position: [row - 1, col - 1, 0], // Adjust positions based on your needs\n      rotation: [0, 0, 0], // Initial rotation\n    }))\n  );\n\n  // Initialize the state with 6 faces (adjust as needed)\n  return Array.from({ length: 6 }, () => [...faceNodes]);\n};\n\nexport default RubiksCube;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}