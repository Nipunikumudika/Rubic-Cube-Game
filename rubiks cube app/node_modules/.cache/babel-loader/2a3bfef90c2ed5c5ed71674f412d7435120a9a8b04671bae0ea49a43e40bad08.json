{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\rubik cube app\\\\rubiks-cube-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader';\nimport { useLoader } from 'react-three-fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RubiksCube = () => {\n  _s();\n  const [cubeState, setCubeState] = useState(createInitialCubeState());\n  const rotateFace = (faceIndex, direction) => {\n    // setCubeState(prevState => {\n    //   const updatedCubeState = [...prevState];\n\n    //   // Identify the nodes associated with the specified face\n    //   const faceNodes = updatedCubeState[faceIndex];\n\n    //   // Rotate the cubes in the specified face\n    //   faceNodes.forEach(cube => {\n    //     // Update the cube position based on the direction of rotation\n    //     if (cube && cube.position && Array.isArray(cube.position)) {\n    //       cube.position[0] += direction; // Adjust the position update based on your needs\n    //     }\n    //   });\n\n    //   return updatedCubeState;\n    // });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), cubeState.map((face, index) => /*#__PURE__*/_jsxDEV(Face, {\n        cubes: face\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => rotateFace(0, 1),\n      children: \"Rotate Top Face Clockwise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(RubiksCube, \"VgeFny5jRX/SlSHmNEHA2QqHGDI=\");\n_c = RubiksCube;\nconst Face = ({\n  cubes\n}) => {\n  return cubes.map((cube, index) => /*#__PURE__*/_jsxDEV(Cube, {\n    position: cube.position,\n    rotation: cube.rotation\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this));\n};\n_c2 = Face;\nconst Cube = ({\n  position,\n  rotation\n}) => {\n  _s2();\n  const {\n    scene\n  } = useLoader(GLTFLoader, '/rubikcube.gltf');\n  scene.scale.set(0.3, 0.3, 0.3);\n  scene.rotation.set(Math.PI / 6, Math.PI / 4, 0);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: scene\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n_s2(Cube, \"KrIghLvv3RhOhm/RzUg6KZbU0T0=\", false, function () {\n  return [useLoader];\n});\n_c3 = Cube;\nconst createInitialCubeState = () => {\n  // Assuming the structure of your model is similar to a 3x3 Rubik's Cube\n  const faceNodes = Array.from({\n    length: 3\n  }, (_, row) => Array.from({\n    length: 3\n  }, (_, col) => ({\n    position: [row - 1, col - 1, 0],\n    // Adjust positions based on your needs\n    rotation: [0, 0, 0] // Initial rotation\n  })));\n\n  // Initialize the state with 6 faces (adjust as needed)\n  return Array.from({\n    length: 6\n  }, () => faceNodes.map(row => [...row]));\n};\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"RubiksCube\");\n$RefreshReg$(_c2, \"Face\");\n$RefreshReg$(_c3, \"Cube\");","map":{"version":3,"names":["React","useState","Canvas","GLTFLoader","useLoader","OrbitControls","jsxDEV","_jsxDEV","RubiksCube","_s","cubeState","setCubeState","createInitialCubeState","rotateFace","faceIndex","direction","children","fileName","_jsxFileName","lineNumber","columnNumber","enableZoom","map","face","index","Face","cubes","position","onClick","_c","cube","Cube","rotation","_c2","_s2","scene","scale","set","Math","PI","object","_c3","faceNodes","Array","from","length","_","row","col","$RefreshReg$"],"sources":["E:/projects/rubik cube app/rubiks-cube-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader';\nimport { useLoader } from 'react-three-fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport './App.css';\n\nconst RubiksCube = () => {\n  const [cubeState, setCubeState] = useState(createInitialCubeState());\n\n  const rotateFace = (faceIndex, direction) => {\n    // setCubeState(prevState => {\n    //   const updatedCubeState = [...prevState];\n  \n    //   // Identify the nodes associated with the specified face\n    //   const faceNodes = updatedCubeState[faceIndex];\n  \n    //   // Rotate the cubes in the specified face\n    //   faceNodes.forEach(cube => {\n    //     // Update the cube position based on the direction of rotation\n    //     if (cube && cube.position && Array.isArray(cube.position)) {\n    //       cube.position[0] += direction; // Adjust the position update based on your needs\n    //     }\n    //   });\n  \n    //   return updatedCubeState;\n    // });\n  };\n  \n\n  return (\n    <div>\n<Canvas>\n      <ambientLight />\n      <OrbitControls enableZoom={false}/>\n      {cubeState.map((face, index) => (\n        <Face key={index} cubes={face} />\n      ))}\n      <pointLight position={[10, 10, 10]} />\n      \n      {/* Add buttons for other face rotations */}\n    </Canvas>\n    <button onClick={() => rotateFace(0, 1)}>Rotate Top Face Clockwise</button>\n    </div>\n    \n  );\n};\n\nconst Face = ({ cubes }) => {\n  return cubes.map((cube, index) => (\n    <Cube key={index} position={cube.position} rotation={cube.rotation} />\n  ));\n};\n\nconst Cube = ({ position, rotation }) => {\n  const { scene } = useLoader(GLTFLoader, '/rubikcube.gltf');\n  scene.scale.set(0.3, 0.3, 0.3); \n  scene.rotation.set(Math.PI / 6, Math.PI / 4, 0);\n  return <primitive object={scene}/>;\n};\n\nconst createInitialCubeState = () => {\n  // Assuming the structure of your model is similar to a 3x3 Rubik's Cube\n  const faceNodes = Array.from({ length: 3 }, (_, row) =>\n    Array.from({ length: 3 }, (_, col) => ({\n      position: [row - 1, col - 1, 0], // Adjust positions based on your needs\n      rotation: [0, 0, 0], // Initial rotation\n    }))\n  );\n\n  // Initialize the state with 6 faces (adjust as needed)\n  return Array.from({ length: 6 }, () => faceNodes.map(row => [...row]));\n};\n\nexport default RubiksCube;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}