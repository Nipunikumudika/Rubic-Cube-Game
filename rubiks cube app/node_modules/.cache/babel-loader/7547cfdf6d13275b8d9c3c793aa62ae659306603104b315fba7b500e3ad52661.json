{"ast":null,"code":"import { Face3 } from \"../../../build/three.module.js\";\n/**\n * Break faces with edges longer than maxEdgeLength\n * - not recursive\n */\n\nvar TessellateModifier = function (maxEdgeLength) {\n  this.maxEdgeLength = maxEdgeLength;\n};\nTessellateModifier.prototype.modify = function (geometry) {\n  var edge;\n  var faces = [];\n  var faceVertexUvs = [];\n  var maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n  for (var i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n    faceVertexUvs[i] = [];\n  }\n  for (var i = 0, il = geometry.faces.length; i < il; i++) {\n    var face = geometry.faces[i];\n    if (face instanceof Face3) {\n      var a = face.a;\n      var b = face.b;\n      var c = face.c;\n      var va = geometry.vertices[a];\n      var vb = geometry.vertices[b];\n      var vc = geometry.vertices[c];\n      var dab = va.distanceToSquared(vb);\n      var dbc = vb.distanceToSquared(vc);\n      var dac = va.distanceToSquared(vc);\n      if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n        var m = geometry.vertices.length;\n        var triA = face.clone();\n        var triB = face.clone();\n        if (dab >= dbc && dab >= dac) {\n          var vm = va.clone();\n          vm.lerp(vb, 0.5);\n          triA.a = a;\n          triA.b = m;\n          triA.c = c;\n          triB.a = m;\n          triB.b = b;\n          triB.c = c;\n          if (face.vertexNormals.length === 3) {\n            var vnm = face.vertexNormals[0].clone();\n            vnm.lerp(face.vertexNormals[1], 0.5);\n            triA.vertexNormals[1].copy(vnm);\n            triB.vertexNormals[0].copy(vnm);\n          }\n          if (face.vertexColors.length === 3) {\n            var vcm = face.vertexColors[0].clone();\n            vcm.lerp(face.vertexColors[1], 0.5);\n            triA.vertexColors[1].copy(vcm);\n            triB.vertexColors[0].copy(vcm);\n          }\n          edge = 0;\n        } else if (dbc >= dab && dbc >= dac) {\n          var vm = vb.clone();\n          vm.lerp(vc, 0.5);\n          triA.a = a;\n          triA.b = b;\n          triA.c = m;\n          triB.a = m;\n          triB.b = c;\n          triB.c = a;\n          if (face.vertexNormals.length === 3) {\n            var vnm = face.vertexNormals[1].clone();\n            vnm.lerp(face.vertexNormals[2], 0.5);\n            triA.vertexNormals[2].copy(vnm);\n            triB.vertexNormals[0].copy(vnm);\n            triB.vertexNormals[1].copy(face.vertexNormals[2]);\n            triB.vertexNormals[2].copy(face.vertexNormals[0]);\n          }\n          if (face.vertexColors.length === 3) {\n            var vcm = face.vertexColors[1].clone();\n            vcm.lerp(face.vertexColors[2], 0.5);\n            triA.vertexColors[2].copy(vcm);\n            triB.vertexColors[0].copy(vcm);\n            triB.vertexColors[1].copy(face.vertexColors[2]);\n            triB.vertexColors[2].copy(face.vertexColors[0]);\n          }\n          edge = 1;\n        } else {\n          var vm = va.clone();\n          vm.lerp(vc, 0.5);\n          triA.a = a;\n          triA.b = b;\n          triA.c = m;\n          triB.a = m;\n          triB.b = b;\n          triB.c = c;\n          if (face.vertexNormals.length === 3) {\n            var vnm = face.vertexNormals[0].clone();\n            vnm.lerp(face.vertexNormals[2], 0.5);\n            triA.vertexNormals[2].copy(vnm);\n            triB.vertexNormals[0].copy(vnm);\n          }\n          if (face.vertexColors.length === 3) {\n            var vcm = face.vertexColors[0].clone();\n            vcm.lerp(face.vertexColors[2], 0.5);\n            triA.vertexColors[2].copy(vcm);\n            triB.vertexColors[0].copy(vcm);\n          }\n          edge = 2;\n        }\n        faces.push(triA, triB);\n        geometry.vertices.push(vm);\n        for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n          if (geometry.faceVertexUvs[j].length) {\n            var uvs = geometry.faceVertexUvs[j][i];\n            var uvA = uvs[0];\n            var uvB = uvs[1];\n            var uvC = uvs[2];\n\n            // AB\n\n            if (edge === 0) {\n              var uvM = uvA.clone();\n              uvM.lerp(uvB, 0.5);\n              var uvsTriA = [uvA.clone(), uvM.clone(), uvC.clone()];\n              var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n\n              // BC\n            } else if (edge === 1) {\n              var uvM = uvB.clone();\n              uvM.lerp(uvC, 0.5);\n              var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n              var uvsTriB = [uvM.clone(), uvC.clone(), uvA.clone()];\n\n              // AC\n            } else {\n              var uvM = uvA.clone();\n              uvM.lerp(uvC, 0.5);\n              var uvsTriA = [uvA.clone(), uvB.clone(), uvM.clone()];\n              var uvsTriB = [uvM.clone(), uvB.clone(), uvC.clone()];\n            }\n            faceVertexUvs[j].push(uvsTriA, uvsTriB);\n          }\n        }\n      } else {\n        faces.push(face);\n        for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\n          faceVertexUvs[j].push(geometry.faceVertexUvs[j][i]);\n        }\n      }\n    }\n  }\n  geometry.faces = faces;\n  geometry.faceVertexUvs = faceVertexUvs;\n};\nexport { TessellateModifier };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}