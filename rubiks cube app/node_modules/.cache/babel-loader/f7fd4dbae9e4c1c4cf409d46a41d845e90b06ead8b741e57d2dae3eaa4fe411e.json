{"ast":null,"code":"import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useMemo, useEffect } from 'react';\nimport { useThree } from 'react-three-fiber';\nimport { WebGLMultisampleRenderTarget, WebGLRenderTarget } from 'three';\n\n// ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(width, height, settings) {\n  const {\n    size,\n    gl\n  } = useThree();\n  const dpr = useMemo(() => gl.getPixelRatio(), [gl]);\n  const _width = typeof width === 'number' ? width : size.width * dpr;\n  const _height = typeof height === 'number' ? height : size.height * dpr;\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n  const target = useMemo(() => {\n    const {\n        multisample,\n        samples\n      } = _settings,\n      targetSettings = _objectWithoutPropertiesLoose(_settings, [\"multisample\", \"samples\"]);\n    let target;\n    if (multisample && gl.capabilities.isWebGL2) {\n      target = new WebGLMultisampleRenderTarget(_width, _height, targetSettings);\n      if (samples) target.samples = samples;\n    } else {\n      target = new WebGLRenderTarget(_width, _height, targetSettings);\n    }\n    return target; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    target.setSize(_width, _height);\n  }, [target, _width, _height]);\n  useEffect(() => {\n    return () => target.dispose(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return target;\n}\nexport { useFBO };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}