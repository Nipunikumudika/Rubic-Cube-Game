{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\RubiksCubeModel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { Vector2, Raycaster } from \"three\";\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RubiksCubeModel = ({\n  nodesSubset,\n  drag,\n  onDragChange\n}) => {\n  _s();\n  const cubeRefs = useRef([]);\n  const orbitRef = useRef();\n  const startYRef = useRef(0);\n  const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\n  const groupRef = useRef();\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  // const { camera } = useThree();\n  let x, y, z;\n  const handlePointerDown = event => {\n    // orbitRef.current.DraggingDown\n    x = orbitRef.current.object.position.x;\n    y = orbitRef.current.object.position.y;\n    z = orbitRef.current.object.position.z;\n    raycaster.setFromCamera(mouse, camera);\n    const intersection = raycaster.intersectObject(yourObject); // Replace with the object you want to intersect\n\n    if (intersection.length > 0) {\n      const actualCoordinates = intersection[0].point;\n      console.log('Actual Coordinates:', actualCoordinates);\n    }\n\n    // mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    startYRef.current = event.clientY / window.innerHeight * 2 + 1;\n    onDragChange(false);\n    window.addEventListener(\"pointermove\", handlePointerMove, {\n      passive: true\n    });\n    window.addEventListener(\"pointerup\", handlePointerUp, {\n      passive: true\n    });\n    event.stopPropagation();\n  };\n  let deltaY;\n  const handlePointerMove = event => {\n    const startY = startYRef.current;\n    if (startY !== null) {\n      const endY = event.clientY / window.innerHeight * 2 + 1;\n      deltaY = endY - startY;\n    }\n  };\n  let targetRot = 0;\n  const handlePointerUp = async () => {\n    window.removeEventListener(\"pointermove\", handlePointerMove);\n    window.removeEventListener(\"pointerup\", handlePointerUp);\n    if (deltaY > 0) {\n      cubeRefs.current.forEach(cubeRef => {\n        targetRot = cubeRef.current.rotation.z + Math.PI / 2;\n      });\n      DraggingDown();\n      deltaY = 0;\n    } else if (deltaY < 0) {\n      cubeRefs.current.forEach(cubeRef => {\n        targetRot = cubeRef.current.rotation.z - Math.PI / 2;\n      });\n      DraggingUp();\n      deltaY = 0;\n    }\n    onDragChange(true);\n  };\n  const DraggingDown = async () => {\n    cubeRefs.current.forEach(async cubeRef => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z += Math.PI / 10;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n    onDragChange(true);\n  };\n  const DraggingUp = async () => {\n    cubeRefs.current.forEach(async cubeRef => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z -= Math.PI / 10;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n    onDragChange(true);\n  };\n  useFrame(() => {\n    orbitRef.current.enabled = drag;\n    orbitRef.current.update();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"group\", {\n      ref: groupRef,\n      scale: [0.3, 0.3, 0.3],\n      rotation: initialRotation,\n      onPointerDown: handlePointerDown,\n      children: nodesSubset.map((node, index) => /*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: node,\n        ref: ref => cubeRefs.current[index] = {\n          current: ref\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      ref: orbitRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RubiksCubeModel, \"1xgKvHUUHKG51pm9ACIJDD/foSI=\", false, function () {\n  return [useFrame];\n});\n_c = RubiksCubeModel;\nexport default RubiksCubeModel;\nvar _c;\n$RefreshReg$(_c, \"RubiksCubeModel\");","map":{"version":3,"names":["React","useRef","OrbitControls","useFrame","useThree","Vector2","Raycaster","THREE","jsxDEV","_jsxDEV","Fragment","_Fragment","RubiksCubeModel","nodesSubset","drag","onDragChange","_s","cubeRefs","orbitRef","startYRef","initialRotation","Math","PI","groupRef","raycaster","mouse","x","y","z","handlePointerDown","event","current","object","position","setFromCamera","camera","intersection","intersectObject","yourObject","length","actualCoordinates","point","console","log","clientY","window","innerHeight","addEventListener","handlePointerMove","passive","handlePointerUp","stopPropagation","deltaY","startY","endY","targetRot","removeEventListener","forEach","cubeRef","rotation","DraggingDown","DraggingUp","abs","Promise","resolve","requestAnimationFrame","setTimeout","enabled","update","children","ref","scale","onPointerDown","map","node","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/RubiksCubeModel.js"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport { useFrame,useThree } from \"react-three-fiber\";\r\nimport { Vector2, Raycaster } from \"three\";\r\nimport * as THREE from 'three';\r\n\r\nconst RubiksCubeModel = ({ nodesSubset, drag, onDragChange }) => {\r\n  const cubeRefs = useRef([]);\r\n  const orbitRef = useRef();\r\n  const startYRef = useRef(0);\r\n  const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\r\n  const groupRef = useRef();\r\n  const raycaster = new THREE.Raycaster();\r\n  const mouse = new THREE.Vector2();\r\n  // const { camera } = useThree();\r\nlet x,y,z;\r\n  const handlePointerDown = (event) => {\r\n    // orbitRef.current.DraggingDown\r\n   x= orbitRef.current.object.position.x\r\n   y= orbitRef.current.object.position.y\r\n   z= orbitRef.current.object.position.z\r\n\r\n   raycaster.setFromCamera(mouse, camera);\r\n   const intersection = raycaster.intersectObject(yourObject); // Replace with the object you want to intersect\r\n\r\n   if (intersection.length > 0) {\r\n     const actualCoordinates = intersection[0].point;\r\n     console.log('Actual Coordinates:', actualCoordinates);\r\n   }\r\n\r\n    // mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    startYRef.current = (event.clientY / window.innerHeight) * 2 + 1;\r\n    onDragChange(false);\r\n    window.addEventListener(\"pointermove\", handlePointerMove, { passive: true });\r\n    window.addEventListener(\"pointerup\", handlePointerUp, { passive: true });\r\n    event.stopPropagation();\r\n  };\r\n\r\n  let deltaY;\r\n\r\n  const handlePointerMove = (event) => {\r\n\r\n    const startY = startYRef.current;\r\n    if (startY !== null) {\r\n      const endY = (event.clientY / window.innerHeight) * 2 + 1;\r\n      deltaY = endY - startY;\r\n    }\r\n  };\r\n\r\n  let targetRot = 0;\r\n\r\n  const handlePointerUp = async () => {\r\n    window.removeEventListener(\"pointermove\", handlePointerMove);\r\n    window.removeEventListener(\"pointerup\", handlePointerUp);\r\n    if (deltaY > 0) {\r\n      cubeRefs.current.forEach((cubeRef) => {\r\n        targetRot = cubeRef.current.rotation.z + Math.PI / 2;\r\n      });\r\n      DraggingDown();\r\n      deltaY = 0;\r\n    } else if (deltaY < 0) {\r\n      cubeRefs.current.forEach((cubeRef) => {\r\n        targetRot = cubeRef.current.rotation.z - Math.PI / 2;\r\n      });\r\n      DraggingUp();\r\n      deltaY = 0;\r\n    }\r\n    onDragChange(true);\r\n  };\r\n\r\n  const DraggingDown = async () => {\r\n    cubeRefs.current.forEach(async (cubeRef) => {\r\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n        cubeRef.current.rotation.z += Math.PI / 10;\r\n        await new Promise((resolve) => requestAnimationFrame(resolve));\r\n        await new Promise((resolve) => setTimeout(resolve, 1));\r\n      }\r\n    });\r\n    onDragChange(true);\r\n  };\r\n\r\n  const DraggingUp = async () => {\r\n    cubeRefs.current.forEach(async (cubeRef) => {\r\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n        cubeRef.current.rotation.z -= Math.PI / 10;\r\n        await new Promise((resolve) => requestAnimationFrame(resolve));\r\n        await new Promise((resolve) => setTimeout(resolve, 1));\r\n      }\r\n    });\r\n    onDragChange(true);\r\n  };\r\n\r\n  useFrame(() => {\r\n    orbitRef.current.enabled = drag;\r\n    orbitRef.current.update();\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <group\r\n        ref={groupRef}\r\n        scale={[0.3, 0.3, 0.3]}\r\n        rotation={initialRotation}\r\n        onPointerDown={handlePointerDown}\r\n      >\r\n        {nodesSubset.map((node, index) => (\r\n          <primitive\r\n            key={index}\r\n            object={node}\r\n            ref={(ref) => (cubeRefs.current[index] = { current: ref })}\r\n          />\r\n        ))}\r\n      </group>\r\n      <OrbitControls ref={orbitRef}  />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RubiksCubeModel;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,QAAQ,EAACC,QAAQ,QAAQ,mBAAmB;AACrD,SAASC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAC1C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/B,MAAMC,eAAe,GAAGA,CAAC;EAAEC,WAAW;EAAEC,IAAI;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC/D,MAAMC,QAAQ,GAAGhB,MAAM,CAAC,EAAE,CAAC;EAC3B,MAAMiB,QAAQ,GAAGjB,MAAM,CAAC,CAAC;EACzB,MAAMkB,SAAS,GAAGlB,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAMmB,eAAe,GAAG,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC,EAAED,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;EACrD,MAAMC,QAAQ,GAAGtB,MAAM,CAAC,CAAC;EACzB,MAAMuB,SAAS,GAAG,IAAIjB,KAAK,CAACD,SAAS,CAAC,CAAC;EACvC,MAAMmB,KAAK,GAAG,IAAIlB,KAAK,CAACF,OAAO,CAAC,CAAC;EACjC;EACF,IAAIqB,CAAC,EAACC,CAAC,EAACC,CAAC;EACP,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnC;IACDJ,CAAC,GAAER,QAAQ,CAACa,OAAO,CAACC,MAAM,CAACC,QAAQ,CAACP,CAAC;IACrCC,CAAC,GAAET,QAAQ,CAACa,OAAO,CAACC,MAAM,CAACC,QAAQ,CAACN,CAAC;IACrCC,CAAC,GAAEV,QAAQ,CAACa,OAAO,CAACC,MAAM,CAACC,QAAQ,CAACL,CAAC;IAErCJ,SAAS,CAACU,aAAa,CAACT,KAAK,EAAEU,MAAM,CAAC;IACtC,MAAMC,YAAY,GAAGZ,SAAS,CAACa,eAAe,CAACC,UAAU,CAAC,CAAC,CAAC;;IAE5D,IAAIF,YAAY,CAACG,MAAM,GAAG,CAAC,EAAE;MAC3B,MAAMC,iBAAiB,GAAGJ,YAAY,CAAC,CAAC,CAAC,CAACK,KAAK;MAC/CC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,iBAAiB,CAAC;IACvD;;IAEC;IACArB,SAAS,CAACY,OAAO,GAAID,KAAK,CAACc,OAAO,GAAGC,MAAM,CAACC,WAAW,GAAI,CAAC,GAAG,CAAC;IAChE/B,YAAY,CAAC,KAAK,CAAC;IACnB8B,MAAM,CAACE,gBAAgB,CAAC,aAAa,EAAEC,iBAAiB,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;IAC5EJ,MAAM,CAACE,gBAAgB,CAAC,WAAW,EAAEG,eAAe,EAAE;MAAED,OAAO,EAAE;IAAK,CAAC,CAAC;IACxEnB,KAAK,CAACqB,eAAe,CAAC,CAAC;EACzB,CAAC;EAED,IAAIC,MAAM;EAEV,MAAMJ,iBAAiB,GAAIlB,KAAK,IAAK;IAEnC,MAAMuB,MAAM,GAAGlC,SAAS,CAACY,OAAO;IAChC,IAAIsB,MAAM,KAAK,IAAI,EAAE;MACnB,MAAMC,IAAI,GAAIxB,KAAK,CAACc,OAAO,GAAGC,MAAM,CAACC,WAAW,GAAI,CAAC,GAAG,CAAC;MACzDM,MAAM,GAAGE,IAAI,GAAGD,MAAM;IACxB;EACF,CAAC;EAED,IAAIE,SAAS,GAAG,CAAC;EAEjB,MAAML,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCL,MAAM,CAACW,mBAAmB,CAAC,aAAa,EAAER,iBAAiB,CAAC;IAC5DH,MAAM,CAACW,mBAAmB,CAAC,WAAW,EAAEN,eAAe,CAAC;IACxD,IAAIE,MAAM,GAAG,CAAC,EAAE;MACdnC,QAAQ,CAACc,OAAO,CAAC0B,OAAO,CAAEC,OAAO,IAAK;QACpCH,SAAS,GAAGG,OAAO,CAAC3B,OAAO,CAAC4B,QAAQ,CAAC/B,CAAC,GAAGP,IAAI,CAACC,EAAE,GAAG,CAAC;MACtD,CAAC,CAAC;MACFsC,YAAY,CAAC,CAAC;MACdR,MAAM,GAAG,CAAC;IACZ,CAAC,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAE;MACrBnC,QAAQ,CAACc,OAAO,CAAC0B,OAAO,CAAEC,OAAO,IAAK;QACpCH,SAAS,GAAGG,OAAO,CAAC3B,OAAO,CAAC4B,QAAQ,CAAC/B,CAAC,GAAGP,IAAI,CAACC,EAAE,GAAG,CAAC;MACtD,CAAC,CAAC;MACFuC,UAAU,CAAC,CAAC;MACZT,MAAM,GAAG,CAAC;IACZ;IACArC,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAM6C,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B3C,QAAQ,CAACc,OAAO,CAAC0B,OAAO,CAAC,MAAOC,OAAO,IAAK;MAC1C,OAAOrC,IAAI,CAACyC,GAAG,CAACJ,OAAO,CAAC3B,OAAO,CAAC4B,QAAQ,CAAC/B,CAAC,GAAG2B,SAAS,CAAC,IAAI,KAAK,EAAE;QAChEG,OAAO,CAAC3B,OAAO,CAAC4B,QAAQ,CAAC/B,CAAC,IAAIP,IAAI,CAACC,EAAE,GAAG,EAAE;QAC1C,MAAM,IAAIyC,OAAO,CAAEC,OAAO,IAAKC,qBAAqB,CAACD,OAAO,CAAC,CAAC;QAC9D,MAAM,IAAID,OAAO,CAAEC,OAAO,IAAKE,UAAU,CAACF,OAAO,EAAE,CAAC,CAAC,CAAC;MACxD;IACF,CAAC,CAAC;IACFjD,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAM8C,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B5C,QAAQ,CAACc,OAAO,CAAC0B,OAAO,CAAC,MAAOC,OAAO,IAAK;MAC1C,OAAOrC,IAAI,CAACyC,GAAG,CAACJ,OAAO,CAAC3B,OAAO,CAAC4B,QAAQ,CAAC/B,CAAC,GAAG2B,SAAS,CAAC,IAAI,KAAK,EAAE;QAChEG,OAAO,CAAC3B,OAAO,CAAC4B,QAAQ,CAAC/B,CAAC,IAAIP,IAAI,CAACC,EAAE,GAAG,EAAE;QAC1C,MAAM,IAAIyC,OAAO,CAAEC,OAAO,IAAKC,qBAAqB,CAACD,OAAO,CAAC,CAAC;QAC9D,MAAM,IAAID,OAAO,CAAEC,OAAO,IAAKE,UAAU,CAACF,OAAO,EAAE,CAAC,CAAC,CAAC;MACxD;IACF,CAAC,CAAC;IACFjD,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAEDZ,QAAQ,CAAC,MAAM;IACbe,QAAQ,CAACa,OAAO,CAACoC,OAAO,GAAGrD,IAAI;IAC/BI,QAAQ,CAACa,OAAO,CAACqC,MAAM,CAAC,CAAC;EAC3B,CAAC,CAAC;EAEF,oBACE3D,OAAA,CAAAE,SAAA;IAAA0D,QAAA,gBACE5D,OAAA;MACE6D,GAAG,EAAE/C,QAAS;MACdgD,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;MACvBZ,QAAQ,EAAEvC,eAAgB;MAC1BoD,aAAa,EAAE3C,iBAAkB;MAAAwC,QAAA,EAEhCxD,WAAW,CAAC4D,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC3BlE,OAAA;QAEEuB,MAAM,EAAE0C,IAAK;QACbJ,GAAG,EAAGA,GAAG,IAAMrD,QAAQ,CAACc,OAAO,CAAC4C,KAAK,CAAC,GAAG;UAAE5C,OAAO,EAAEuC;QAAI;MAAG,GAFtDK,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACRtE,OAAA,CAACP,aAAa;MAACoE,GAAG,EAAEpD;IAAS;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA,eACjC,CAAC;AAEP,CAAC;AAAC/D,EAAA,CA9GIJ,eAAe;EAAA,QAsFnBT,QAAQ;AAAA;AAAA6E,EAAA,GAtFJpE,eAAe;AAgHrB,eAAeA,eAAe;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}