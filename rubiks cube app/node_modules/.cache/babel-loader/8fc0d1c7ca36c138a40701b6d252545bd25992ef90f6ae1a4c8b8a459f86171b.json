{"ast":null,"code":"/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod = {},\n  l = void 0,\n  aa = mod;\nfunction r(c, d) {\n  var a = c.split(\".\"),\n    b = aa;\n  !(a[0] in b) && b.execScript && b.execScript(\"var \" + a[0]);\n  for (var e; a.length && (e = a.shift());) !a.length && d !== l ? b[e] = d : b = b[e] ? b[e] : b[e] = {};\n}\n;\nvar t = \"undefined\" !== typeof Uint8Array && \"undefined\" !== typeof Uint16Array && \"undefined\" !== typeof Uint32Array && \"undefined\" !== typeof DataView;\nfunction v(c) {\n  var d = c.length,\n    a = 0,\n    b = Number.POSITIVE_INFINITY,\n    e,\n    f,\n    g,\n    h,\n    k,\n    m,\n    n,\n    p,\n    s,\n    x;\n  for (p = 0; p < d; ++p) c[p] > a && (a = c[p]), c[p] < b && (b = c[p]);\n  e = 1 << a;\n  f = new (t ? Uint32Array : Array)(e);\n  g = 1;\n  h = 0;\n  for (k = 2; g <= a;) {\n    for (p = 0; p < d; ++p) if (c[p] === g) {\n      m = 0;\n      n = h;\n      for (s = 0; s < g; ++s) m = m << 1 | n & 1, n >>= 1;\n      x = g << 16 | p;\n      for (s = m; s < e; s += k) f[s] = x;\n      ++h;\n    }\n    ++g;\n    h <<= 1;\n    k <<= 1;\n  }\n  return [f, a, b];\n}\n;\nfunction w(c, d) {\n  this.g = [];\n  this.h = 32768;\n  this.d = this.f = this.a = this.l = 0;\n  this.input = t ? new Uint8Array(c) : c;\n  this.m = !1;\n  this.i = y;\n  this.r = !1;\n  if (d || !(d = {})) d.index && (this.a = d.index), d.bufferSize && (this.h = d.bufferSize), d.bufferType && (this.i = d.bufferType), d.resize && (this.r = d.resize);\n  switch (this.i) {\n    case A:\n      this.b = 32768;\n      this.c = new (t ? Uint8Array : Array)(32768 + this.h + 258);\n      break;\n    case y:\n      this.b = 0;\n      this.c = new (t ? Uint8Array : Array)(this.h);\n      this.e = this.z;\n      this.n = this.v;\n      this.j = this.w;\n      break;\n    default:\n      throw Error(\"invalid inflate mode\");\n  }\n}\nvar A = 0,\n  y = 1,\n  B = {\n    t: A,\n    s: y\n  };\nw.prototype.k = function () {\n  for (; !this.m;) {\n    var c = C(this, 3);\n    c & 1 && (this.m = !0);\n    c >>>= 1;\n    switch (c) {\n      case 0:\n        var d = this.input,\n          a = this.a,\n          b = this.c,\n          e = this.b,\n          f = d.length,\n          g = l,\n          h = l,\n          k = b.length,\n          m = l;\n        this.d = this.f = 0;\n        if (a + 1 >= f) throw Error(\"invalid uncompressed block header: LEN\");\n        g = d[a++] | d[a++] << 8;\n        if (a + 1 >= f) throw Error(\"invalid uncompressed block header: NLEN\");\n        h = d[a++] | d[a++] << 8;\n        if (g === ~h) throw Error(\"invalid uncompressed block header: length verify\");\n        if (a + g > d.length) throw Error(\"input buffer is broken\");\n        switch (this.i) {\n          case A:\n            for (; e + g > b.length;) {\n              m = k - e;\n              g -= m;\n              if (t) b.set(d.subarray(a, a + m), e), e += m, a += m;else for (; m--;) b[e++] = d[a++];\n              this.b = e;\n              b = this.e();\n              e = this.b;\n            }\n            break;\n          case y:\n            for (; e + g > b.length;) b = this.e({\n              p: 2\n            });\n            break;\n          default:\n            throw Error(\"invalid inflate mode\");\n        }\n        if (t) b.set(d.subarray(a, a + g), e), e += g, a += g;else for (; g--;) b[e++] = d[a++];\n        this.a = a;\n        this.b = e;\n        this.c = b;\n        break;\n      case 1:\n        this.j(ba, ca);\n        break;\n      case 2:\n        for (var n = C(this, 5) + 257, p = C(this, 5) + 1, s = C(this, 4) + 4, x = new (t ? Uint8Array : Array)(D.length), S = l, T = l, U = l, u = l, M = l, F = l, z = l, q = l, V = l, q = 0; q < s; ++q) x[D[q]] = C(this, 3);\n        if (!t) {\n          q = s;\n          for (s = x.length; q < s; ++q) x[D[q]] = 0;\n        }\n        S = v(x);\n        u = new (t ? Uint8Array : Array)(n + p);\n        q = 0;\n        for (V = n + p; q < V;) switch (M = E(this, S), M) {\n          case 16:\n            for (z = 3 + C(this, 2); z--;) u[q++] = F;\n            break;\n          case 17:\n            for (z = 3 + C(this, 3); z--;) u[q++] = 0;\n            F = 0;\n            break;\n          case 18:\n            for (z = 11 + C(this, 7); z--;) u[q++] = 0;\n            F = 0;\n            break;\n          default:\n            F = u[q++] = M;\n        }\n        T = t ? v(u.subarray(0, n)) : v(u.slice(0, n));\n        U = t ? v(u.subarray(n)) : v(u.slice(n));\n        this.j(T, U);\n        break;\n      default:\n        throw Error(\"unknown BTYPE: \" + c);\n    }\n  }\n  return this.n();\n};\nvar G = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n  D = t ? new Uint16Array(G) : G,\n  H = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258],\n  I = t ? new Uint16Array(H) : H,\n  J = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0],\n  K = t ? new Uint8Array(J) : J,\n  L = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577],\n  da = t ? new Uint16Array(L) : L,\n  ea = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],\n  N = t ? new Uint8Array(ea) : ea,\n  O = new (t ? Uint8Array : Array)(288),\n  P,\n  fa;\nP = 0;\nfor (fa = O.length; P < fa; ++P) O[P] = 143 >= P ? 8 : 255 >= P ? 9 : 279 >= P ? 7 : 8;\nvar ba = v(O),\n  Q = new (t ? Uint8Array : Array)(30),\n  R,\n  ga;\nR = 0;\nfor (ga = Q.length; R < ga; ++R) Q[R] = 5;\nvar ca = v(Q);\nfunction C(c, d) {\n  for (var a = c.f, b = c.d, e = c.input, f = c.a, g = e.length, h; b < d;) {\n    if (f >= g) throw Error(\"input buffer is broken\");\n    a |= e[f++] << b;\n    b += 8;\n  }\n  h = a & (1 << d) - 1;\n  c.f = a >>> d;\n  c.d = b - d;\n  c.a = f;\n  return h;\n}\nfunction E(c, d) {\n  for (var a = c.f, b = c.d, e = c.input, f = c.a, g = e.length, h = d[0], k = d[1], m, n; b < k && !(f >= g);) a |= e[f++] << b, b += 8;\n  m = h[a & (1 << k) - 1];\n  n = m >>> 16;\n  if (n > b) throw Error(\"invalid code length: \" + n);\n  c.f = a >> n;\n  c.d = b - n;\n  c.a = f;\n  return m & 65535;\n}\nw.prototype.j = function (c, d) {\n  var a = this.c,\n    b = this.b;\n  this.o = c;\n  for (var e = a.length - 258, f, g, h, k; 256 !== (f = E(this, c));) if (256 > f) b >= e && (this.b = b, a = this.e(), b = this.b), a[b++] = f;else {\n    g = f - 257;\n    k = I[g];\n    0 < K[g] && (k += C(this, K[g]));\n    f = E(this, d);\n    h = da[f];\n    0 < N[f] && (h += C(this, N[f]));\n    b >= e && (this.b = b, a = this.e(), b = this.b);\n    for (; k--;) a[b] = a[b++ - h];\n  }\n  for (; 8 <= this.d;) this.d -= 8, this.a--;\n  this.b = b;\n};\nw.prototype.w = function (c, d) {\n  var a = this.c,\n    b = this.b;\n  this.o = c;\n  for (var e = a.length, f, g, h, k; 256 !== (f = E(this, c));) if (256 > f) b >= e && (a = this.e(), e = a.length), a[b++] = f;else {\n    g = f - 257;\n    k = I[g];\n    0 < K[g] && (k += C(this, K[g]));\n    f = E(this, d);\n    h = da[f];\n    0 < N[f] && (h += C(this, N[f]));\n    b + k > e && (a = this.e(), e = a.length);\n    for (; k--;) a[b] = a[b++ - h];\n  }\n  for (; 8 <= this.d;) this.d -= 8, this.a--;\n  this.b = b;\n};\nw.prototype.e = function () {\n  var c = new (t ? Uint8Array : Array)(this.b - 32768),\n    d = this.b - 32768,\n    a,\n    b,\n    e = this.c;\n  if (t) c.set(e.subarray(32768, c.length));else {\n    a = 0;\n    for (b = c.length; a < b; ++a) c[a] = e[a + 32768];\n  }\n  this.g.push(c);\n  this.l += c.length;\n  if (t) e.set(e.subarray(d, d + 32768));else for (a = 0; 32768 > a; ++a) e[a] = e[d + a];\n  this.b = 32768;\n  return e;\n};\nw.prototype.z = function (c) {\n  var d,\n    a = this.input.length / this.a + 1 | 0,\n    b,\n    e,\n    f,\n    g = this.input,\n    h = this.c;\n  c && (\"number\" === typeof c.p && (a = c.p), \"number\" === typeof c.u && (a += c.u));\n  2 > a ? (b = (g.length - this.a) / this.o[2], f = 258 * (b / 2) | 0, e = f < h.length ? h.length + f : h.length << 1) : e = h.length * a;\n  t ? (d = new Uint8Array(e), d.set(h)) : d = h;\n  return this.c = d;\n};\nw.prototype.n = function () {\n  var c = 0,\n    d = this.c,\n    a = this.g,\n    b,\n    e = new (t ? Uint8Array : Array)(this.l + (this.b - 32768)),\n    f,\n    g,\n    h,\n    k;\n  if (0 === a.length) return t ? this.c.subarray(32768, this.b) : this.c.slice(32768, this.b);\n  f = 0;\n  for (g = a.length; f < g; ++f) {\n    b = a[f];\n    h = 0;\n    for (k = b.length; h < k; ++h) e[c++] = b[h];\n  }\n  f = 32768;\n  for (g = this.b; f < g; ++f) e[c++] = d[f];\n  this.g = [];\n  return this.buffer = e;\n};\nw.prototype.v = function () {\n  var c,\n    d = this.b;\n  t ? this.r ? (c = new Uint8Array(d), c.set(this.c.subarray(0, d))) : c = this.c.subarray(0, d) : (this.c.length > d && (this.c.length = d), c = this.c);\n  return this.buffer = c;\n};\nfunction W(c, d) {\n  var a, b;\n  this.input = c;\n  this.a = 0;\n  if (d || !(d = {})) d.index && (this.a = d.index), d.verify && (this.A = d.verify);\n  a = c[this.a++];\n  b = c[this.a++];\n  switch (a & 15) {\n    case ha:\n      this.method = ha;\n      break;\n    default:\n      throw Error(\"unsupported compression method\");\n  }\n  if (0 !== ((a << 8) + b) % 31) throw Error(\"invalid fcheck flag:\" + ((a << 8) + b) % 31);\n  if (b & 32) throw Error(\"fdict flag is not supported\");\n  this.q = new w(c, {\n    index: this.a,\n    bufferSize: d.bufferSize,\n    bufferType: d.bufferType,\n    resize: d.resize\n  });\n}\nW.prototype.k = function () {\n  var c = this.input,\n    d,\n    a;\n  d = this.q.k();\n  this.a = this.q.a;\n  if (this.A) {\n    a = (c[this.a++] << 24 | c[this.a++] << 16 | c[this.a++] << 8 | c[this.a++]) >>> 0;\n    var b = d;\n    if (\"string\" === typeof b) {\n      var e = b.split(\"\"),\n        f,\n        g;\n      f = 0;\n      for (g = e.length; f < g; f++) e[f] = (e[f].charCodeAt(0) & 255) >>> 0;\n      b = e;\n    }\n    for (var h = 1, k = 0, m = b.length, n, p = 0; 0 < m;) {\n      n = 1024 < m ? 1024 : m;\n      m -= n;\n      do h += b[p++], k += h; while (--n);\n      h %= 65521;\n      k %= 65521;\n    }\n    if (a !== (k << 16 | h) >>> 0) throw Error(\"invalid adler-32 checksum\");\n  }\n  return d;\n};\nvar ha = 8;\nr(\"Zlib.Inflate\", W);\nr(\"Zlib.Inflate.prototype.decompress\", W.prototype.k);\nvar X = {\n    ADAPTIVE: B.s,\n    BLOCK: B.t\n  },\n  Y,\n  Z,\n  $,\n  ia;\nif (Object.keys) Y = Object.keys(X);else for (Z in Y = [], $ = 0, X) Y[$++] = Z;\n$ = 0;\nfor (ia = Y.length; $ < ia; ++$) Z = Y[$], r(\"Zlib.Inflate.BufferType.\" + Z, X[Z]);\nvar Inflate = mod.Zlib.Inflate;\nexport { Inflate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}