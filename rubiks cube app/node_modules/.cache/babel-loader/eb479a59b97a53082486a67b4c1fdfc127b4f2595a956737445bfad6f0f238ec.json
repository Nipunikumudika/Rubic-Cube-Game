{"ast":null,"code":"import { Pass } from \"../postprocessing/Pass.js\";\nvar MaskPass = function (scene, camera) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: MaskPass,\n  render: function (renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    var context = renderer.getContext();\n    var state = renderer.state;\n\n    // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false);\n\n    // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true);\n\n    // set up stencil\n\n    var writeValue, clearValue;\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true);\n\n    // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false);\n\n    // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n});\nvar ClearMaskPass = function () {\n  Pass.call(this);\n  this.needsSwap = false;\n};\nClearMaskPass.prototype = Object.create(Pass.prototype);\nObject.assign(ClearMaskPass.prototype, {\n  render: function (renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n});\nexport { MaskPass, ClearMaskPass };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}