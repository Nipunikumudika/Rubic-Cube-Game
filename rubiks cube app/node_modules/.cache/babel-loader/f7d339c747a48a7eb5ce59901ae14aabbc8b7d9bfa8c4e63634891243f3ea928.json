{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { Suspense, useMemo, useRef, useState, useEffect } from \"react\";\n// import { Canvas, useFrame } from \"react-three-fiber\";\n// import { GLTFLoader } from \"three/addons/loaders/GLTFLoader\";\n// import { useLoader } from \"react-three-fiber\";\n\n// import \"./App.css\";\n// import RubiksCubeModel from \"./RubiksCubeModel\";\n\n// const RubiksCube = () => {\n//   const { scene } = useLoader(GLTFLoader, \"/rubikcube.gltf\");\n\n//   const nodesSubset1 = useMemo(() => scene.children.slice(0, 9), [scene]); //only one layer\n//   const nodesSubset2 = useMemo(() => scene.children.slice(9, 18), [scene]); //two layers\n//   const nodesSubset3 = useMemo(() => scene.children.slice(18, 27), [scene]); //two layers\n\n//   return (\n//     <Canvas>\n//       <ambientLight />\n//       <Suspense fallback={null}>\n//         <RubiksCubeModel nodesSubset={nodesSubset1} />\n//         <RubiksCubeModel nodesSubset={nodesSubset2} />\n//         <RubiksCubeModel nodesSubset={nodesSubset3} />\n//       </Suspense>\n//       <pointLight position={[10, 10, 10]} />\n//     </Canvas>\n//   );\n// };\n\n// export default RubiksCube;\nimport React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { useDrag } from 'react-use-gesture';\nimport { Html } from 'drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RotatingObject = () => {\n  _s();\n  const meshRef = useRef();\n  const [isDragging, setDragging] = useState(false);\n  const bind = useDrag(({\n    offset: [x, y],\n    down\n  }) => {\n    if (down) {\n      const rect = meshRef.current.getBoundingClientRect();\n      const isInsideObject = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      if (!isInsideObject) {\n        setDragging(true);\n\n        // Calculate the rotation based on mouse drag\n        const rotationFactor = 0.005;\n        const rotationY = x * rotationFactor;\n        const rotationX = y * rotationFactor;\n\n        // Apply the rotation to the mesh\n        meshRef.current.rotation.x += rotationX;\n        meshRef.current.rotation.y += rotationY;\n      }\n    } else {\n      setDragging(false);\n    }\n  }, {\n    eventOptions: {\n      capture: true\n    } // Ensure the drag event captures the target element\n  });\n  useFrame(() => {\n    // Optionally, you can update the object's state or perform other animations here\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    ...bind(),\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(RotatingObject, \"GoBCWaQBwOcRRMwyDAfB4d3mUy8=\", false, function () {\n  return [useDrag, useFrame];\n});\n_c = RotatingObject;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [0, 0, 5]\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RotatingObject, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"RotatingObject\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useRef","useState","Canvas","useFrame","useDrag","Html","jsxDEV","_jsxDEV","RotatingObject","_s","meshRef","isDragging","setDragging","bind","offset","x","y","down","rect","current","getBoundingClientRect","isInsideObject","left","right","top","bottom","rotationFactor","rotationY","rotationX","rotation","eventOptions","capture","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","App","camera","position","_c2","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/App.js"],"sourcesContent":["// import React, { Suspense, useMemo, useRef, useState, useEffect } from \"react\";\n// import { Canvas, useFrame } from \"react-three-fiber\";\n// import { GLTFLoader } from \"three/addons/loaders/GLTFLoader\";\n// import { useLoader } from \"react-three-fiber\";\n\n// import \"./App.css\";\n// import RubiksCubeModel from \"./RubiksCubeModel\";\n\n\n// const RubiksCube = () => {\n//   const { scene } = useLoader(GLTFLoader, \"/rubikcube.gltf\");\n\n//   const nodesSubset1 = useMemo(() => scene.children.slice(0, 9), [scene]); //only one layer\n//   const nodesSubset2 = useMemo(() => scene.children.slice(9, 18), [scene]); //two layers\n//   const nodesSubset3 = useMemo(() => scene.children.slice(18, 27), [scene]); //two layers\n\n \n//   return (\n//     <Canvas>\n//       <ambientLight />\n//       <Suspense fallback={null}>\n//         <RubiksCubeModel nodesSubset={nodesSubset1} />\n//         <RubiksCubeModel nodesSubset={nodesSubset2} />\n//         <RubiksCubeModel nodesSubset={nodesSubset3} />\n//       </Suspense>\n//       <pointLight position={[10, 10, 10]} />\n//     </Canvas>\n//   );\n// };\n\n// export default RubiksCube;\nimport React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { useDrag } from 'react-use-gesture';\nimport { Html } from 'drei';\n\nconst RotatingObject = () => {\n  const meshRef = useRef();\n  const [isDragging, setDragging] = useState(false);\n\n  const bind = useDrag(\n    ({ offset: [x, y], down }) => {\n      if (down) {\n        const rect = meshRef.current.getBoundingClientRect();\n        const isInsideObject =\n          x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n\n        if (!isInsideObject) {\n          setDragging(true);\n\n          // Calculate the rotation based on mouse drag\n          const rotationFactor = 0.005;\n          const rotationY = x * rotationFactor;\n          const rotationX = y * rotationFactor;\n\n          // Apply the rotation to the mesh\n          meshRef.current.rotation.x += rotationX;\n          meshRef.current.rotation.y += rotationY;\n        }\n      } else {\n        setDragging(false);\n      }\n    },\n    {\n      eventOptions: { capture: true }, // Ensure the drag event captures the target element\n    }\n  );\n\n  useFrame(() => {\n    // Optionally, you can update the object's state or perform other animations here\n  });\n\n  return (\n    <mesh ref={meshRef} {...bind()}>\n      {/* Your 3D object geometry and material go here */}\n      <boxGeometry args={[1, 1, 1]} />\n      <meshBasicMaterial color=\"blue\" />\n\n    </mesh>\n  );\n};\n\nconst App = () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 5] }}>\n      <ambientLight />\n      <RotatingObject />\n    </Canvas>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}