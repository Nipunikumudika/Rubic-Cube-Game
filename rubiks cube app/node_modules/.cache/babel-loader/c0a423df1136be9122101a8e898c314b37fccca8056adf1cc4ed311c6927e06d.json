{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\LargerCube.js\",\n  _s = $RefreshSig$();\nimport { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LargeCube({\n  onFaceClick\n}) {\n  _s();\n  const meshRef = useRef();\n\n  // Use raycaster to determine which face is clicked\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  const handlePointerDown = event => {\n    // Calculate normalized mouse coordinates\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Set raycaster origin and direction based on mouse coordinates\n    raycaster.setFromCamera(mouse, event.camera);\n\n    // Perform ray intersection with the cube\n    const intersects = raycaster.intersectObject(meshRef.current);\n    if (intersects.length > 0) {\n      // Get the face normal from the intersection\n      const faceNormal = intersects[0].face.normal;\n\n      // Determine which face is clicked based on the face normal\n      let clickedFace = null;\n      if (faceNormal.equals(new THREE.Vector3(1, 0, 0))) {\n        clickedFace = \"RightFace\";\n      } else if (faceNormal.equals(new THREE.Vector3(-1, 0, 0))) {\n        clickedFace = \"LeftFace\";\n      } else if (faceNormal.equals(new THREE.Vector3(0, 1, 0))) {\n        clickedFace = \"TopFace\";\n      } else if (faceNormal.equals(new THREE.Vector3(0, -1, 0))) {\n        clickedFace = \"BottomFace\";\n      } else if (faceNormal.equals(new THREE.Vector3(0, 0, 1))) {\n        clickedFace = \"FrontFace\";\n      } else if (faceNormal.equals(new THREE.Vector3(0, 0, -1))) {\n        clickedFace = \"BackFace\";\n      }\n\n      // Invoke the callback with the clicked face\n      if (clickedFace) {\n        onFaceClick(clickedFace);\n      }\n    }\n  };\n\n  // Update the raycaster on each frame\n  useFrame(({\n    gl,\n    camera\n  }) => {\n    raycaster.update();\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    rotation: [Math.PI / 6, Math.PI / 4, 0],\n    onPointerDown: handlePointerDown,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      attach: \"geometry\",\n      args: [1.8, 1.8, 1.8]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attach: \"material\",\n      color: \"#6be092\",\n      wireframe: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(LargeCube, \"/vg1AmA8+P3+Fj0/y210JTVKtL0=\", false, function () {\n  return [useFrame];\n});\n_c = LargeCube;\nvar _c;\n$RefreshReg$(_c, \"LargeCube\");","map":{"version":3,"names":["useRef","useFrame","jsxDEV","_jsxDEV","LargeCube","onFaceClick","_s","meshRef","raycaster","THREE","Raycaster","mouse","Vector2","handlePointerDown","event","x","clientX","window","innerWidth","y","clientY","innerHeight","setFromCamera","camera","intersects","intersectObject","current","length","faceNormal","face","normal","clickedFace","equals","Vector3","gl","update","ref","rotation","Math","PI","onPointerDown","children","attach","args","fileName","_jsxFileName","lineNumber","columnNumber","color","wireframe","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/LargerCube.js"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nfunction LargeCube({ onFaceClick }) {\r\n  const meshRef = useRef();\r\n\r\n  // Use raycaster to determine which face is clicked\r\n  const raycaster = new THREE.Raycaster();\r\n  const mouse = new THREE.Vector2();\r\n\r\n  const handlePointerDown = (event) => {\r\n    // Calculate normalized mouse coordinates\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n    // Set raycaster origin and direction based on mouse coordinates\r\n    raycaster.setFromCamera(mouse, event.camera);\r\n\r\n    // Perform ray intersection with the cube\r\n    const intersects = raycaster.intersectObject(meshRef.current);\r\n\r\n    if (intersects.length > 0) {\r\n      // Get the face normal from the intersection\r\n      const faceNormal = intersects[0].face.normal;\r\n\r\n      // Determine which face is clicked based on the face normal\r\n      let clickedFace = null;\r\n\r\n      if (faceNormal.equals(new THREE.Vector3(1, 0, 0))) {\r\n        clickedFace = \"RightFace\";\r\n      } else if (faceNormal.equals(new THREE.Vector3(-1, 0, 0))) {\r\n        clickedFace = \"LeftFace\";\r\n      } else if (faceNormal.equals(new THREE.Vector3(0, 1, 0))) {\r\n        clickedFace = \"TopFace\";\r\n      } else if (faceNormal.equals(new THREE.Vector3(0, -1, 0))) {\r\n        clickedFace = \"BottomFace\";\r\n      } else if (faceNormal.equals(new THREE.Vector3(0, 0, 1))) {\r\n        clickedFace = \"FrontFace\";\r\n      } else if (faceNormal.equals(new THREE.Vector3(0, 0, -1))) {\r\n        clickedFace = \"BackFace\";\r\n      }\r\n\r\n      // Invoke the callback with the clicked face\r\n      if (clickedFace) {\r\n        onFaceClick(clickedFace);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Update the raycaster on each frame\r\n  useFrame(({ gl, camera }) => {\r\n    raycaster.update();\r\n  });\r\n\r\n  return (\r\n    <mesh\r\n      ref={meshRef}\r\n      rotation={[Math.PI / 6, Math.PI / 4, 0]}\r\n      onPointerDown={handlePointerDown}\r\n    >\r\n      <boxGeometry attach=\"geometry\" args={[1.8, 1.8, 1.8]} />\r\n      <meshStandardMaterial attach=\"material\" color=\"#6be092\" wireframe={true} />\r\n    </mesh>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,SAASA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGP,MAAM,CAAC,CAAC;;EAExB;EACA,MAAMQ,SAAS,GAAG,IAAIC,KAAK,CAACC,SAAS,CAAC,CAAC;EACvC,MAAMC,KAAK,GAAG,IAAIF,KAAK,CAACG,OAAO,CAAC,CAAC;EAEjC,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACnC;IACAH,KAAK,CAACI,CAAC,GAAID,KAAK,CAACE,OAAO,GAAGC,MAAM,CAACC,UAAU,GAAI,CAAC,GAAG,CAAC;IACrDP,KAAK,CAACQ,CAAC,GAAG,EAAEL,KAAK,CAACM,OAAO,GAAGH,MAAM,CAACI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;;IAEvD;IACAb,SAAS,CAACc,aAAa,CAACX,KAAK,EAAEG,KAAK,CAACS,MAAM,CAAC;;IAE5C;IACA,MAAMC,UAAU,GAAGhB,SAAS,CAACiB,eAAe,CAAClB,OAAO,CAACmB,OAAO,CAAC;IAE7D,IAAIF,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MACzB;MACA,MAAMC,UAAU,GAAGJ,UAAU,CAAC,CAAC,CAAC,CAACK,IAAI,CAACC,MAAM;;MAE5C;MACA,IAAIC,WAAW,GAAG,IAAI;MAEtB,IAAIH,UAAU,CAACI,MAAM,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QACjDF,WAAW,GAAG,WAAW;MAC3B,CAAC,MAAM,IAAIH,UAAU,CAACI,MAAM,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QACzDF,WAAW,GAAG,UAAU;MAC1B,CAAC,MAAM,IAAIH,UAAU,CAACI,MAAM,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QACxDF,WAAW,GAAG,SAAS;MACzB,CAAC,MAAM,IAAIH,UAAU,CAACI,MAAM,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QACzDF,WAAW,GAAG,YAAY;MAC5B,CAAC,MAAM,IAAIH,UAAU,CAACI,MAAM,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QACxDF,WAAW,GAAG,WAAW;MAC3B,CAAC,MAAM,IAAIH,UAAU,CAACI,MAAM,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;QACzDF,WAAW,GAAG,UAAU;MAC1B;;MAEA;MACA,IAAIA,WAAW,EAAE;QACf1B,WAAW,CAAC0B,WAAW,CAAC;MAC1B;IACF;EACF,CAAC;;EAED;EACA9B,QAAQ,CAAC,CAAC;IAAEiC,EAAE;IAAEX;EAAO,CAAC,KAAK;IAC3Bf,SAAS,CAAC2B,MAAM,CAAC,CAAC;EACpB,CAAC,CAAC;EAEF,oBACEhC,OAAA;IACEiC,GAAG,EAAE7B,OAAQ;IACb8B,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC,EAAED,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAE;IACxCC,aAAa,EAAE3B,iBAAkB;IAAA4B,QAAA,gBAEjCtC,OAAA;MAAauC,MAAM,EAAC,UAAU;MAACC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxD5C,OAAA;MAAsBuC,MAAM,EAAC,UAAU;MAACM,KAAK,EAAC,SAAS;MAACC,SAAS,EAAE;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEX;AAACzC,EAAA,CA7DQF,SAAS;EAAA,QA+ChBH,QAAQ;AAAA;AAAAiD,EAAA,GA/CD9C,SAAS;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}