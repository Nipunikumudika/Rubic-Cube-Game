{"ast":null,"code":"import { Euler, EventDispatcher, MathUtils, Quaternion, Vector3 } from \"../../../build/three.module.js\";\n\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nvar DeviceOrientationControls = function (object) {\n  var scope = this;\n  var changeEvent = {\n    type: \"change\"\n  };\n  var EPS = 0.000001;\n  this.object = object;\n  this.object.rotation.reorder('YXZ');\n  this.enabled = true;\n  this.deviceOrientation = {};\n  this.screenOrientation = 0;\n  this.alphaOffset = 0; // radians\n\n  var onDeviceOrientationChangeEvent = function (event) {\n    scope.deviceOrientation = event;\n  };\n  var onScreenOrientationChangeEvent = function () {\n    scope.screenOrientation = window.orientation || 0;\n  };\n\n  // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n  var setObjectQuaternion = function () {\n    var zee = new Vector3(0, 0, 1);\n    var euler = new Euler();\n    var q0 = new Quaternion();\n    var q1 = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)); // - PI/2 around the x-axis\n\n    return function (quaternion, alpha, beta, gamma, orient) {\n      euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n      quaternion.setFromEuler(euler); // orient the device\n\n      quaternion.multiply(q1); // camera looks out the back of the device, not the top\n\n      quaternion.multiply(q0.setFromAxisAngle(zee, -orient)); // adjust for screen orientation\n    };\n  }();\n  this.connect = function () {\n    onScreenOrientationChangeEvent(); // run once on load\n\n    // iOS 13+\n\n    if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n      window.DeviceOrientationEvent.requestPermission().then(function (response) {\n        if (response == 'granted') {\n          window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n          window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n        }\n      }).catch(function (error) {\n        console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n      });\n    } else {\n      window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n      window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n    }\n    scope.enabled = true;\n  };\n  this.disconnect = function () {\n    window.removeEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n    window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n    scope.enabled = false;\n  };\n  this.update = function () {\n    var lastQuaternion = new Quaternion();\n    return function () {\n      if (scope.enabled === false) return;\n      var device = scope.deviceOrientation;\n      if (device) {\n        var alpha = device.alpha ? MathUtils.degToRad(device.alpha) + scope.alphaOffset : 0; // Z\n\n        var beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n        var gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n        var orient = scope.screenOrientation ? MathUtils.degToRad(scope.screenOrientation) : 0; // O\n\n        setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);\n        if (8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          lastQuaternion.copy(scope.object.quaternion);\n          scope.dispatchEvent(changeEvent);\n        }\n      }\n    };\n  }();\n  this.dispose = function () {\n    scope.disconnect();\n  };\n  this.connect();\n};\nDeviceOrientationControls.prototype = Object.create(EventDispatcher.prototype);\nDeviceOrientationControls.prototype.constructor = DeviceOrientationControls;\nexport { DeviceOrientationControls };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}