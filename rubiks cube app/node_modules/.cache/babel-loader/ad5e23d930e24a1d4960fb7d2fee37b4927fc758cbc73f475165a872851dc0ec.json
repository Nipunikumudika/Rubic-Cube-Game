{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\RubiksCubeModel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RubiksCubeModel = ({\n  nodesSubset\n}) => {\n  _s();\n  const cubeRefs = useRef([]);\n  const startYRef = useRef(0);\n  const canvasRef = useRef(null);\n  const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\n  const {\n    camera,\n    gl\n  } = useThree();\n  const orbitControlsRef = useRef();\n  useFrame(() => {\n    // Update the orbit controls in the animation loop\n    orbitControlsRef.current.update();\n  });\n  useEffect(() => {\n    const handleDocumentClick = event => {\n      // Get mouse coordinates\n      const mouseX = event.clientX / window.innerWidth * 2 - 1;\n      const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      // Raycast to check if the mouse click is outside the object\n      const raycaster = new THREE.Raycaster();\n      const camera = orbitControlsRef.current.object;\n      raycaster.setFromCamera({\n        x: mouseX,\n        y: mouseY\n      }, camera);\n      const intersects = raycaster.intersectObjects(cubeRefs.current.map(ref => ref.current));\n      if (intersects.length === 0) {\n        // Mouse click is outside the object, update rotation\n        const newRotation = [Math.PI / 4, 0, 0]; // Set your desired rotation\n        // You can set the new rotation to the group or individual objects based on your needs\n      }\n    };\n\n    // Add event listener for mouse click on the document\n    document.addEventListener('click', handleDocumentClick);\n\n    // Cleanup the event listener on component unmount\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  const handlePointerDown = event => {\n    console.log(\"down\");\n    startYRef.current = event.clientY;\n    window.addEventListener(\"pointermove\", handlePointerMove);\n    window.addEventListener(\"pointerup\", handlePointerUp);\n    event.stopPropagation();\n  };\n  let deltaY;\n  const handlePointerMove = event => {\n    console.log(\"move\");\n    const startY = startYRef.current;\n    if (startY !== null) {\n      deltaY = event.clientY - startY;\n    }\n  };\n  let targetRot = 0;\n  const handlePointerUp = async () => {\n    console.log(\"up\");\n    window.removeEventListener(\"pointermove\", handlePointerMove);\n    window.removeEventListener(\"pointerup\", handlePointerUp);\n    if (deltaY > 0) {\n      cubeRefs.current.forEach((cubeRef, index) => {\n        targetRot = cubeRef.current.rotation.z + Math.PI / 2;\n        //console.log(targetRot);\n        // console.log(canvas.current.rotation.z);\n      });\n      DraggingDown();\n      deltaY = 0;\n    } else if (deltaY < 0) {\n      cubeRefs.current.forEach((cubeRef, index) => {\n        targetRot = cubeRef.current.rotation.z - Math.PI / 2;\n        console.log(cubeRef.current.rotation.z);\n      });\n      DraggingUp();\n      deltaY = 0;\n    }\n  };\n  const DraggingDown = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z += Math.PI / 10;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n  };\n  const DraggingUp = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z -= Math.PI / 10;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {\n      ref: orbitControlsRef,\n      enableZoom: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n      scale: [0.3, 0.3, 0.3],\n      rotation: initialRotation,\n      onPointerDown: handlePointerDown,\n      children: nodesSubset.map((node, index) => /*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: node,\n        ref: ref => cubeRefs.current[index] = {\n          current: ref\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RubiksCubeModel, \"VkbVMFtnz8kFd7imibEJs0pjeBo=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = RubiksCubeModel;\nexport default RubiksCubeModel;\nvar _c;\n$RefreshReg$(_c, \"RubiksCubeModel\");","map":{"version":3,"names":["React","useRef","useEffect","useFrame","useThree","OrbitControls","jsxDEV","_jsxDEV","Fragment","_Fragment","RubiksCubeModel","nodesSubset","_s","cubeRefs","startYRef","canvasRef","initialRotation","Math","PI","camera","gl","orbitControlsRef","current","update","handleDocumentClick","event","mouseX","clientX","window","innerWidth","mouseY","clientY","innerHeight","raycaster","THREE","Raycaster","object","setFromCamera","x","y","intersects","intersectObjects","map","ref","length","newRotation","document","addEventListener","removeEventListener","handlePointerDown","console","log","handlePointerMove","handlePointerUp","stopPropagation","deltaY","startY","targetRot","forEach","cubeRef","index","rotation","z","DraggingDown","DraggingUp","abs","Promise","resolve","requestAnimationFrame","setTimeout","children","enableZoom","fileName","_jsxFileName","lineNumber","columnNumber","scale","onPointerDown","node","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/RubiksCubeModel.js"],"sourcesContent":["import React, { useRef,useEffect} from \"react\";\r\nimport {useFrame ,useThree} from \"react-three-fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\n\r\nconst RubiksCubeModel = ({ nodesSubset }) => {\r\n    const cubeRefs = useRef([]);\r\n    const startYRef = useRef(0);\r\n    const canvasRef = useRef(null);\r\n    const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\r\n    const { camera, gl } = useThree();\r\n    const orbitControlsRef = useRef();\r\n\r\n\r\n    useFrame(() => {\r\n      // Update the orbit controls in the animation loop\r\n      orbitControlsRef.current.update();\r\n    });\r\n\r\n    useEffect(() => {\r\n      const handleDocumentClick = (event) => {\r\n        // Get mouse coordinates\r\n        const mouseX = (event.clientX / window.innerWidth) * 2 - 1;\r\n        const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\r\n  \r\n        // Raycast to check if the mouse click is outside the object\r\n        const raycaster = new THREE.Raycaster();\r\n        const camera = orbitControlsRef.current.object;\r\n        raycaster.setFromCamera({ x: mouseX, y: mouseY }, camera);\r\n  \r\n        const intersects = raycaster.intersectObjects(cubeRefs.current.map((ref) => ref.current));\r\n  \r\n        if (intersects.length === 0) {\r\n          // Mouse click is outside the object, update rotation\r\n          const newRotation = [Math.PI / 4, 0, 0]; // Set your desired rotation\r\n          // You can set the new rotation to the group or individual objects based on your needs\r\n        }\r\n      };\r\n  \r\n      // Add event listener for mouse click on the document\r\n      document.addEventListener('click', handleDocumentClick);\r\n  \r\n      // Cleanup the event listener on component unmount\r\n      return () => {\r\n        document.removeEventListener('click', handleDocumentClick);\r\n      };\r\n    }, []); // Empty dependency array to run the effect only once on mount\r\n    \r\n\r\n  const handlePointerDown = (event) => {\r\n    console.log(\"down\");\r\n    startYRef.current = event.clientY;\r\n    window.addEventListener(\"pointermove\", handlePointerMove);\r\n    window.addEventListener(\"pointerup\", handlePointerUp);\r\n    event.stopPropagation();\r\n  \r\n};\r\n\r\n\r\n  \r\n    let deltaY;\r\n  \r\n    \r\n    const handlePointerMove = (event) => {\r\n        console.log(\"move\");\r\n        const startY = startYRef.current;\r\n        if (startY !== null) {\r\n          deltaY = event.clientY - startY;\r\n        }\r\n      \r\n    };\r\n    let targetRot=0;\r\n    const handlePointerUp =async () => {\r\n        console.log(\"up\");\r\n        window.removeEventListener(\"pointermove\", handlePointerMove);\r\n        window.removeEventListener(\"pointerup\", handlePointerUp);\r\n        if (deltaY > 0) {\r\n          cubeRefs.current.forEach((cubeRef, index) => {\r\n            targetRot = cubeRef.current.rotation.z + (Math.PI / 2);\r\n            //console.log(targetRot);\r\n            // console.log(canvas.current.rotation.z);\r\n          });\r\n          \r\n          DraggingDown();\r\n          deltaY = 0;\r\n        } else if (deltaY < 0) {\r\n          cubeRefs.current.forEach((cubeRef, index) => {\r\n            targetRot = cubeRef.current.rotation.z - (Math.PI / 2);\r\n            console.log(cubeRef.current.rotation.z);\r\n          });\r\n          \r\n          DraggingUp();\r\n          deltaY = 0;\r\n        }\r\n      \r\n    };\r\n  \r\n    const DraggingDown = async () => {\r\n      cubeRefs.current.forEach(async (cubeRef, index) => {\r\n        while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n          cubeRef.current.rotation.z += Math.PI / 10;\r\n          await new Promise((resolve) => requestAnimationFrame(resolve));\r\n          await new Promise((resolve) => setTimeout(resolve, 1));\r\n        }\r\n      });\r\n    };\r\n  \r\n    const DraggingUp = async () => {\r\n      cubeRefs.current.forEach(async (cubeRef, index) => {\r\n        while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n          cubeRef.current.rotation.z -= Math.PI / 10;\r\n          await new Promise((resolve) => requestAnimationFrame(resolve));\r\n          await new Promise((resolve) => setTimeout(resolve, 1));\r\n        }\r\n      });\r\n    };\r\n  \r\n\r\n    return (\r\n      <>\r\n      <OrbitControls ref={orbitControlsRef} enableZoom={false} />\r\n      <group scale={[0.3, 0.3, 0.3]} rotation={initialRotation} onPointerDown={handlePointerDown}>\r\n        {nodesSubset.map((node, index) => (\r\n          <primitive\r\n            key={index}\r\n            object={node}\r\n            ref={(ref) => (cubeRefs.current[index] = { current: ref })}\r\n          />\r\n        ))}\r\n      </group>\r\n      </>\r\n      \r\n    );\r\n  };\r\n\r\n  \r\nexport default RubiksCubeModel; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}