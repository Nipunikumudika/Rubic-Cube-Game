{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\RubiksCubeModel.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useRef, useEffect, useState } from \"react\";\n// import { OrbitControls } from \"@react-three/drei\";\n\n// const RubiksCubeModel = ({ nodesSubset }) => {\n//   const cubeRefs = useRef([]);\n//   const startYRef = useRef(0);\n//   const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\n//   const groupRef = useRef();\n//   const controlsRef = useRef();\n\n//   const handlePointerDown = (event) => {\n//     if (event.preventDefault) {\n//       event.preventDefault();\n//     }\n//     if (event.stopPropagation) {\n//       event.stopPropagation();\n//     }\n\n//     console.log(\"down\");\n//     startYRef.current = event.clientY;\n\n//     // Check if the click is outside the model\n//     if (event.target.tagName === \"CANVAS\") {\n//       // If outside, enable OrbitControls\n//       controlsRef.current.enabled = true;\n//       console.log(\"outside true\");\n//     } else {\n//       // If inside, disable OrbitControls\n//       controlsRef.current.enabled = false;\n//       console.log(\"inside false\");\n//     }\n\n//     window.addEventListener(\"pointermove\", handlePointerMove);\n//     window.addEventListener(\"pointerup\", handlePointerUp);\n//     event.stopPropagation();\n//   };\n\n//   let deltaY;\n\n//   const handlePointerMove = (event) => {\n//     console.log(\"move\");\n//     const startY = startYRef.current;\n//     if (startY !== null) {\n//       deltaY = event.clientY - startY;\n//     }\n//   };\n\n//   let targetRot = 0;\n\n//   const handlePointerUp = async () => {\n//     console.log(\"up\");\n//     window.removeEventListener(\"pointermove\", handlePointerMove);\n//     window.removeEventListener(\"pointerup\", handlePointerUp);\n//     if (deltaY > 0) {\n//       cubeRefs.current.forEach((cubeRef, index) => {\n//         targetRot = cubeRef.current.rotation.z + Math.PI / 2;\n//       });\n\n//       DraggingDown();\n//       deltaY = 0;\n//     } else if (deltaY < 0) {\n//       cubeRefs.current.forEach((cubeRef, index) => {\n//         targetRot = cubeRef.current.rotation.z - Math.PI / 2;\n//         console.log(cubeRef.current.rotation.z);\n//       });\n\n//       DraggingUp();\n//       deltaY = 0;\n//     }\n//   };\n\n//   const DraggingDown = async () => {\n//     cubeRefs.current.forEach(async (cubeRef, index) => {\n//       while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n//         cubeRef.current.rotation.z += Math.PI / 10;\n//         await new Promise((resolve) => requestAnimationFrame(resolve));\n//         await new Promise((resolve) => setTimeout(resolve, 1));\n//       }\n//     });\n//   };\n\n//   const DraggingUp = async () => {\n//     cubeRefs.current.forEach(async (cubeRef, index) => {\n//       while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n//         cubeRef.current.rotation.z -= Math.PI / 10;\n//         await new Promise((resolve) => requestAnimationFrame(resolve));\n//         await new Promise((resolve) => setTimeout(resolve, 1));\n//       }\n//     });\n//   };\n\n//   return (\n//     <>\n//       <group\n//         ref={groupRef}\n//         scale={[0.3, 0.3, 0.3]}\n//         rotation={initialRotation}\n//         onPointerDown={handlePointerDown}\n//       >\n//         {nodesSubset.map((node, index) => (\n//           <primitive\n//             key={index}\n//             object={node}\n//             ref={(ref) => (cubeRefs.current[index] = { current: ref })}\n//           />\n//         ))}\n//       </group>\n//       <OrbitControls ref={controlsRef} enableZoom={false} />\n//     </>\n//   );\n// };\n\n// export default RubiksCubeModel;\n\nimport React, { useRef } from \"react\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Cube = ({\n  onCubeClick\n}) => {\n  _s();\n  const cubeRef = useRef();\n\n  // This will rotate the cube on the Y-axis every frame\n  useFrame(() => {\n    cubeRef.current.rotation.y += 0.01;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: cubeRef,\n    onClick: onCubeClick // Add onClick event to handle cube click\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Cube, \"4PEmrkJPcv/PSeT1vRzFauLPG/s=\", false, function () {\n  return [useFrame];\n});\n_c = Cube;\nconst RubiksCubeModel = () => {\n  _s2();\n  const controlsRef = useRef();\n  const handleCubeClick = () => {\n    // Remove OrbitControls when the cube is clicked\n    if (controlsRef.current) {\n      controlsRef.current.enabled = false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Cube, {\n      onCubeClick: handleCubeClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      ref: controlsRef,\n      enableZoom: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(RubiksCubeModel, \"S6wVs70VldjWMshuu46GQSuai+E=\");\n_c2 = RubiksCubeModel;\nexport default RubiksCubeModel;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cube\");\n$RefreshReg$(_c2, \"RubiksCubeModel\");","map":{"version":3,"names":["React","useRef","OrbitControls","Canvas","useFrame","jsxDEV","_jsxDEV","Fragment","_Fragment","Cube","onCubeClick","_s","cubeRef","current","rotation","y","ref","onClick","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","RubiksCubeModel","_s2","controlsRef","handleCubeClick","enabled","enableZoom","_c2","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/RubiksCubeModel.js"],"sourcesContent":["// import React, { useRef, useEffect, useState } from \"react\";\r\n// import { OrbitControls } from \"@react-three/drei\";\r\n\r\n// const RubiksCubeModel = ({ nodesSubset }) => {\r\n//   const cubeRefs = useRef([]);\r\n//   const startYRef = useRef(0);\r\n//   const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\r\n//   const groupRef = useRef();\r\n//   const controlsRef = useRef();\r\n\r\n\r\n//   const handlePointerDown = (event) => {\r\n//     if (event.preventDefault) {\r\n//       event.preventDefault();\r\n//     }\r\n//     if (event.stopPropagation) {\r\n//       event.stopPropagation();\r\n//     }\r\n\r\n//     console.log(\"down\");\r\n//     startYRef.current = event.clientY;\r\n\r\n//     // Check if the click is outside the model\r\n//     if (event.target.tagName === \"CANVAS\") {\r\n//       // If outside, enable OrbitControls\r\n//       controlsRef.current.enabled = true;\r\n//       console.log(\"outside true\");\r\n//     } else {\r\n//       // If inside, disable OrbitControls\r\n//       controlsRef.current.enabled = false;\r\n//       console.log(\"inside false\");\r\n//     }\r\n\r\n//     window.addEventListener(\"pointermove\", handlePointerMove);\r\n//     window.addEventListener(\"pointerup\", handlePointerUp);\r\n//     event.stopPropagation();\r\n//   };\r\n\r\n//   let deltaY;\r\n\r\n//   const handlePointerMove = (event) => {\r\n//     console.log(\"move\");\r\n//     const startY = startYRef.current;\r\n//     if (startY !== null) {\r\n//       deltaY = event.clientY - startY;\r\n//     }\r\n//   };\r\n\r\n//   let targetRot = 0;\r\n\r\n//   const handlePointerUp = async () => {\r\n//     console.log(\"up\");\r\n//     window.removeEventListener(\"pointermove\", handlePointerMove);\r\n//     window.removeEventListener(\"pointerup\", handlePointerUp);\r\n//     if (deltaY > 0) {\r\n//       cubeRefs.current.forEach((cubeRef, index) => {\r\n//         targetRot = cubeRef.current.rotation.z + Math.PI / 2;\r\n//       });\r\n\r\n//       DraggingDown();\r\n//       deltaY = 0;\r\n//     } else if (deltaY < 0) {\r\n//       cubeRefs.current.forEach((cubeRef, index) => {\r\n//         targetRot = cubeRef.current.rotation.z - Math.PI / 2;\r\n//         console.log(cubeRef.current.rotation.z);\r\n//       });\r\n\r\n//       DraggingUp();\r\n//       deltaY = 0;\r\n//     }\r\n//   };\r\n\r\n//   const DraggingDown = async () => {\r\n//     cubeRefs.current.forEach(async (cubeRef, index) => {\r\n//       while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n//         cubeRef.current.rotation.z += Math.PI / 10;\r\n//         await new Promise((resolve) => requestAnimationFrame(resolve));\r\n//         await new Promise((resolve) => setTimeout(resolve, 1));\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   const DraggingUp = async () => {\r\n//     cubeRefs.current.forEach(async (cubeRef, index) => {\r\n//       while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n//         cubeRef.current.rotation.z -= Math.PI / 10;\r\n//         await new Promise((resolve) => requestAnimationFrame(resolve));\r\n//         await new Promise((resolve) => setTimeout(resolve, 1));\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <group\r\n//         ref={groupRef}\r\n//         scale={[0.3, 0.3, 0.3]}\r\n//         rotation={initialRotation}\r\n//         onPointerDown={handlePointerDown}\r\n//       >\r\n//         {nodesSubset.map((node, index) => (\r\n//           <primitive\r\n//             key={index}\r\n//             object={node}\r\n//             ref={(ref) => (cubeRefs.current[index] = { current: ref })}\r\n//           />\r\n//         ))}\r\n//       </group>\r\n//       <OrbitControls ref={controlsRef} enableZoom={false} />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default RubiksCubeModel;\r\n\r\nimport React, { useRef } from \"react\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\n\r\nconst Cube = ({ onCubeClick }) => {\r\n  const cubeRef = useRef();\r\n\r\n  // This will rotate the cube on the Y-axis every frame\r\n  useFrame(() => {\r\n    cubeRef.current.rotation.y += 0.01;\r\n  });\r\n\r\n  return (\r\n    <mesh\r\n      ref={cubeRef}\r\n      onClick={onCubeClick} // Add onClick event to handle cube click\r\n    >\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color=\"orange\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst RubiksCubeModel = () => {\r\n  const controlsRef = useRef();\r\n\r\n  const handleCubeClick = () => {\r\n    // Remove OrbitControls when the cube is clicked\r\n    if (controlsRef.current) {\r\n      controlsRef.current.enabled = false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Cube onCubeClick={handleCubeClick} />\r\n      <OrbitControls ref={controlsRef} enableZoom={false} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RubiksCubeModel;\r\n"],"mappings":";;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,MAAM,EAAEC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtD,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,OAAO,GAAGX,MAAM,CAAC,CAAC;;EAExB;EACAG,QAAQ,CAAC,MAAM;IACbQ,OAAO,CAACC,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAI,IAAI;EACpC,CAAC,CAAC;EAEF,oBACET,OAAA;IACEU,GAAG,EAAEJ,OAAQ;IACbK,OAAO,EAAEP,WAAY,CAAC;IAAA;IAAAQ,QAAA,gBAEtBZ,OAAA;MAAaa,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChCjB,OAAA;MAAsBkB,KAAK,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEX,CAAC;AAACZ,EAAA,CAjBIF,IAAI;EAAA,QAIRL,QAAQ;AAAA;AAAAqB,EAAA,GAJJhB,IAAI;AAmBV,MAAMiB,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,WAAW,GAAG3B,MAAM,CAAC,CAAC;EAE5B,MAAM4B,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA,IAAID,WAAW,CAACf,OAAO,EAAE;MACvBe,WAAW,CAACf,OAAO,CAACiB,OAAO,GAAG,KAAK;IACrC;EACF,CAAC;EAED,oBACExB,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACEZ,OAAA,CAACG,IAAI;MAACC,WAAW,EAAEmB;IAAgB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCjB,OAAA,CAACJ,aAAa;MAACc,GAAG,EAAEY,WAAY;MAACG,UAAU,EAAE;IAAM;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACtD,CAAC;AAEP,CAAC;AAACI,GAAA,CAhBID,eAAe;AAAAM,GAAA,GAAfN,eAAe;AAkBrB,eAAeA,eAAe;AAAC,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}