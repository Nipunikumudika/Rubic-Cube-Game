{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\RubiksCubeModel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Vector3 } from \"three\"; // Import Vector3 from three\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RubiksCubeModel = ({\n  nodesSubset\n}) => {\n  _s();\n  const cubeRefs = useRef([]);\n  const startYRef = useRef(null);\n  const canvasRef = useRef(null);\n  const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\n  const {\n    camera,\n    gl\n  } = useThree();\n  const orbitControlsRef = useRef();\n  useEffect(() => {\n    if (orbitControlsRef.current) {\n      orbitControlsRef.current.addEventListener(\"change\", () => {\n        const rotation = camera.rotation.toArray();\n        //console.log(\"Rotation changed:\", rotation);\n      });\n    }\n  }, [camera.rotation]);\n\n  //   const handlePointerDown = (event) => {\n  //     const { clientX, clientY } = event;\n\n  //     const mouseVector = new Vector3(\n  //         (clientX / window.innerWidth) * 2 - 1,\n  //         -(clientY / window.innerHeight) * 2 + 1,\n  //         0.5\n  //     );\n  //     mouseVector.unproject(camera);\n  //     const dir = mouseVector.sub(camera.position).normalize();\n  //     const distance = -camera.position.z / dir.z;\n  //     const clickLocation = camera.position.clone().add(dir.multiplyScalar(distance));\n  //     console.log(\"Click location in world coordinates:\", clickLocation);\n  //     window.addEventListener(\"pointermove\", handlePointerMove);\n  //     window.addEventListener(\"pointerup\", handlePointerUp);\n  // };\n\n  const handlePointerDown = event => {\n    const {\n      clientY\n    } = event;\n    const startScreenY = clientY;\n    window.addEventListener(\"pointermove\", moveEvent => {\n      const {\n        clientY: currentScreenY\n      } = moveEvent;\n\n      // Determine the drag direction based on the change in vertical position\n      const deltaY = currentScreenY - startScreenY;\n      if (deltaY > 0) {\n        console.log(\"Dragging Downward\");\n        // Handle dragging downward logic here\n      } else if (deltaY < 0) {\n        console.log(\"Dragging Upward\");\n        // Handle dragging upward logic here\n      }\n    });\n    window.addEventListener(\"pointerup\", () => {\n      window.removeEventListener(\"pointermove\", handlePointerMove);\n      window.removeEventListener(\"pointerup\", handlePointerUp);\n    });\n    event.stopPropagation();\n  };\n  let deltaY;\n  const handlePointerMove = event => {\n    console.log(\"move\");\n    const startY = startYRef.current;\n    if (startY !== null) {\n      deltaY = event.clientY - startY;\n    }\n  };\n  let targetRot = 0;\n  const handlePointerUp = async () => {\n    console.log(\"up\");\n    window.removeEventListener(\"pointermove\", handlePointerMove);\n    window.removeEventListener(\"pointerup\", handlePointerUp);\n    if (deltaY > 0) {\n      cubeRefs.current.forEach((cubeRef, index) => {\n        targetRot = cubeRef.current.rotation.z + Math.PI / 2;\n        //console.log(targetRot);\n        // console.log(canvas.current.rotation.z);\n      });\n      DraggingDown();\n      deltaY = 0;\n    } else if (deltaY < 0) {\n      cubeRefs.current.forEach((cubeRef, index) => {\n        targetRot = cubeRef.current.rotation.z - Math.PI / 2;\n        console.log(cubeRef.current.rotation.z);\n      });\n      DraggingUp();\n      deltaY = 0;\n    }\n  };\n  const DraggingDown = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z += Math.PI / 10;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n  };\n  const DraggingUp = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z -= Math.PI / 10;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {\n      ref: orbitControlsRef,\n      enableZoom: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n      scale: [0.3, 0.3, 0.3],\n      rotation: initialRotation,\n      onPointerDown: handlePointerDown,\n      children: nodesSubset.map((node, index) => /*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: node,\n        ref: ref => cubeRefs.current[index] = {\n          current: ref\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RubiksCubeModel, \"NgpoVqYD/nI3xgi2N6HlcIQgj88=\", false, function () {\n  return [useThree];\n});\n_c = RubiksCubeModel;\nexport default RubiksCubeModel;\nvar _c;\n$RefreshReg$(_c, \"RubiksCubeModel\");","map":{"version":3,"names":["React","useRef","useEffect","useFrame","useThree","OrbitControls","Vector3","jsxDEV","_jsxDEV","Fragment","_Fragment","RubiksCubeModel","nodesSubset","_s","cubeRefs","startYRef","canvasRef","initialRotation","Math","PI","camera","gl","orbitControlsRef","current","addEventListener","rotation","toArray","handlePointerDown","event","clientY","startScreenY","window","moveEvent","currentScreenY","deltaY","console","log","removeEventListener","handlePointerMove","handlePointerUp","stopPropagation","startY","targetRot","forEach","cubeRef","index","z","DraggingDown","DraggingUp","abs","Promise","resolve","requestAnimationFrame","setTimeout","children","ref","enableZoom","fileName","_jsxFileName","lineNumber","columnNumber","scale","onPointerDown","map","node","object","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/RubiksCubeModel.js"],"sourcesContent":["import React, { useRef,useEffect} from \"react\";\r\nimport {useFrame,useThree } from \"react-three-fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport { Vector3 } from \"three\"; // Import Vector3 from three\r\n\r\n\r\nconst RubiksCubeModel = ({ nodesSubset }) => {\r\n    const cubeRefs = useRef([]);\r\n    const startYRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\r\n    const { camera, gl } = useThree();\r\n    const orbitControlsRef = useRef();\r\n\r\n    useEffect(() => {\r\n      if (orbitControlsRef.current) {\r\n          orbitControlsRef.current.addEventListener(\"change\", () => {\r\n              const rotation = camera.rotation.toArray();\r\n              //console.log(\"Rotation changed:\", rotation);\r\n          });\r\n      }\r\n  }, [camera.rotation]);\r\n\r\n  //   const handlePointerDown = (event) => {\r\n  //     const { clientX, clientY } = event;\r\n\r\n  //     const mouseVector = new Vector3(\r\n  //         (clientX / window.innerWidth) * 2 - 1,\r\n  //         -(clientY / window.innerHeight) * 2 + 1,\r\n  //         0.5\r\n  //     );\r\n  //     mouseVector.unproject(camera);\r\n  //     const dir = mouseVector.sub(camera.position).normalize();\r\n  //     const distance = -camera.position.z / dir.z;\r\n  //     const clickLocation = camera.position.clone().add(dir.multiplyScalar(distance));\r\n  //     console.log(\"Click location in world coordinates:\", clickLocation);\r\n  //     window.addEventListener(\"pointermove\", handlePointerMove);\r\n  //     window.addEventListener(\"pointerup\", handlePointerUp);\r\n  // };\r\n  \r\n  const handlePointerDown = (event) => {\r\n    const { clientY } = event;\r\n    const startScreenY = clientY;\r\n\r\n    window.addEventListener(\"pointermove\", (moveEvent) => {\r\n        const { clientY: currentScreenY } = moveEvent;\r\n\r\n        // Determine the drag direction based on the change in vertical position\r\n        const deltaY = currentScreenY - startScreenY;\r\n        if (deltaY > 0) {\r\n            console.log(\"Dragging Downward\");\r\n            // Handle dragging downward logic here\r\n        } else if (deltaY < 0) {\r\n            console.log(\"Dragging Upward\");\r\n            // Handle dragging upward logic here\r\n        }\r\n    });\r\n\r\n    window.addEventListener(\"pointerup\", () => {\r\n        window.removeEventListener(\"pointermove\", handlePointerMove);\r\n        window.removeEventListener(\"pointerup\", handlePointerUp);\r\n    });\r\n\r\n    event.stopPropagation();\r\n};\r\n\r\n\r\n    let deltaY;\r\n  \r\n    \r\n    const handlePointerMove = (event) => {\r\n        console.log(\"move\");\r\n        const startY = startYRef.current;\r\n        if (startY !== null) {\r\n          deltaY = event.clientY - startY;\r\n        }\r\n      \r\n    };\r\n    let targetRot=0;\r\n    const handlePointerUp =async () => {\r\n        console.log(\"up\");\r\n        window.removeEventListener(\"pointermove\", handlePointerMove);\r\n        window.removeEventListener(\"pointerup\", handlePointerUp);\r\n        if (deltaY > 0) {\r\n          cubeRefs.current.forEach((cubeRef, index) => {\r\n            targetRot = cubeRef.current.rotation.z + (Math.PI / 2);\r\n            //console.log(targetRot);\r\n            // console.log(canvas.current.rotation.z);\r\n          });\r\n          \r\n          DraggingDown();\r\n          deltaY = 0;\r\n        } else if (deltaY < 0) {\r\n          cubeRefs.current.forEach((cubeRef, index) => {\r\n            targetRot = cubeRef.current.rotation.z - (Math.PI / 2);\r\n            console.log(cubeRef.current.rotation.z);\r\n          });\r\n          \r\n          DraggingUp();\r\n          deltaY = 0;\r\n        }\r\n      \r\n    };\r\n  \r\n    const DraggingDown = async () => {\r\n      cubeRefs.current.forEach(async (cubeRef, index) => {\r\n        while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n          cubeRef.current.rotation.z += Math.PI / 10;\r\n          await new Promise((resolve) => requestAnimationFrame(resolve));\r\n          await new Promise((resolve) => setTimeout(resolve, 1));\r\n        }\r\n      });\r\n    };\r\n  \r\n    const DraggingUp = async () => {\r\n      cubeRefs.current.forEach(async (cubeRef, index) => {\r\n        while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\r\n          cubeRef.current.rotation.z -= Math.PI / 10;\r\n          await new Promise((resolve) => requestAnimationFrame(resolve));\r\n          await new Promise((resolve) => setTimeout(resolve, 1));\r\n        }\r\n      });\r\n    };\r\n  \r\n\r\n    return (\r\n      <>\r\n      <OrbitControls ref={orbitControlsRef} enableZoom={false} />\r\n      <group scale={[0.3, 0.3, 0.3]} rotation={initialRotation} onPointerDown={handlePointerDown}>\r\n        {nodesSubset.map((node, index) => (\r\n          <primitive\r\n            key={index}\r\n            object={node}\r\n            ref={(ref) => (cubeRefs.current[index] = { current: ref })}\r\n          />\r\n        ))}\r\n      </group>\r\n      </>\r\n      \r\n    );\r\n  };\r\n\r\n  \r\nexport default RubiksCubeModel; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}