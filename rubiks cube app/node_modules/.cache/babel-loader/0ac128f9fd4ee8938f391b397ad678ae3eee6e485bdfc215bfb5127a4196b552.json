{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\LargerCube.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport SceneInit from './lib/SceneInit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Box() {\n  _s();\n  useEffect(() => {\n    const test = new SceneInit('myThreeJsCanvas');\n    test.initialize();\n    test.animate();\n\n    // inital scene\n    // const boxGeometry = new THREE.BoxGeometry(2, 2, 2);\n    // const boxMaterial = new THREE.MeshNormalMaterial();\n    // const boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\n    // test.scene.add(boxMesh);\n\n    const addNewBoxMesh = (x, y, z) => {\n      const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n      const boxMaterial = new THREE.MeshPhongMaterial({\n        color: 0xfafafa\n      });\n      const boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\n      boxMesh.position.set(x, y, z);\n      test.scene.add(boxMesh);\n    };\n\n    // top rows\n    addNewBoxMesh(0, 2, 0);\n    addNewBoxMesh(2, 2, 0);\n    addNewBoxMesh(-2, 2, 0);\n    addNewBoxMesh(0, 2, -2);\n    addNewBoxMesh(2, 2, -2);\n    addNewBoxMesh(-2, 2, -2);\n    addNewBoxMesh(0, 2, 2);\n    addNewBoxMesh(2, 2, 2);\n    addNewBoxMesh(-2, 2, 2);\n\n    // middle rows\n    addNewBoxMesh(0, 0, 0);\n    addNewBoxMesh(2, 0, 0);\n    addNewBoxMesh(-2, 0, 0);\n    addNewBoxMesh(0, 0, -2);\n    addNewBoxMesh(2, 0, -2);\n    addNewBoxMesh(-2, 0, -2);\n    addNewBoxMesh(0, 0, 2);\n    addNewBoxMesh(2, 0, 2);\n    addNewBoxMesh(-2, 0, 2);\n\n    // bottom rows\n    addNewBoxMesh(0, -2, 0);\n    addNewBoxMesh(2, -2, 0);\n    addNewBoxMesh(-2, -2, 0);\n    addNewBoxMesh(0, -2, -2);\n    addNewBoxMesh(2, -2, -2);\n    addNewBoxMesh(-2, -2, -2);\n    addNewBoxMesh(0, -2, 2);\n    addNewBoxMesh(2, -2, 2);\n    addNewBoxMesh(-2, -2, 2);\n\n    // add shiba model\n    const glftLoader = new GLTFLoader();\n    glftLoader.load('./assets/shiba/scene.gltf', gltfScene => {\n      gltfScene.scene.position.y = 0.5;\n      gltfScene.scene.position.z = 4;\n      gltfScene.scene.scale.set(1, 1, 1);\n      test.scene.add(gltfScene.scene);\n    });\n    const pointer = new THREE.Vector2();\n    const raycaster = new THREE.Raycaster();\n    const onMouseMove = event => {\n      // calculate pointer position in normalized device coordinates\n      // (-1 to +1) for both components\n      pointer.x = event.clientX / window.innerWidth * 2 - 1;\n      pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(pointer, test.camera);\n      const intersects = raycaster.intersectObjects(test.scene.children);\n\n      // for (let i = 0; i < intersects.length; i++) {\n      //   console.log(intersects);\n      // }\n\n      // change color of objects intersecting the raycaster\n      // for (let i = 0; i < intersects.length; i++) {\n      //   intersects[i].object.material.color.set(0xff0000);\n      // }\n\n      // change color of the closest object intersecting the raycaster\n      if (intersects.length > 0) {\n        intersects[0].object.material.color.set(0xff0000);\n      }\n    };\n    window.addEventListener('mousemove', onMouseMove);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myThreeJsCanvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(Box, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Box;\nexport default Box;\nvar _c;\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"names":["useEffect","THREE","GLTFLoader","SceneInit","jsxDEV","_jsxDEV","Box","_s","test","initialize","animate","addNewBoxMesh","x","y","z","boxGeometry","BoxGeometry","boxMaterial","MeshPhongMaterial","color","boxMesh","Mesh","position","set","scene","add","glftLoader","load","gltfScene","scale","pointer","Vector2","raycaster","Raycaster","onMouseMove","event","clientX","window","innerWidth","clientY","innerHeight","setFromCamera","camera","intersects","intersectObjects","children","length","object","material","addEventListener","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/LargerCube.js"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\nimport SceneInit from './lib/SceneInit';\r\n\r\nfunction Box() {\r\n  useEffect(() => {\r\n    const test = new SceneInit('myThreeJsCanvas');\r\n    test.initialize();\r\n    test.animate();\r\n\r\n    // inital scene\r\n    // const boxGeometry = new THREE.BoxGeometry(2, 2, 2);\r\n    // const boxMaterial = new THREE.MeshNormalMaterial();\r\n    // const boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\r\n    // test.scene.add(boxMesh);\r\n\r\n    const addNewBoxMesh = (x, y, z) => {\r\n      const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n      const boxMaterial = new THREE.MeshPhongMaterial({\r\n        color: 0xfafafa,\r\n      });\r\n      const boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\r\n      boxMesh.position.set(x, y, z);\r\n      test.scene.add(boxMesh);\r\n    };\r\n\r\n    // top rows\r\n    addNewBoxMesh(0, 2, 0);\r\n    addNewBoxMesh(2, 2, 0);\r\n    addNewBoxMesh(-2, 2, 0);\r\n    addNewBoxMesh(0, 2, -2);\r\n    addNewBoxMesh(2, 2, -2);\r\n    addNewBoxMesh(-2, 2, -2);\r\n    addNewBoxMesh(0, 2, 2);\r\n    addNewBoxMesh(2, 2, 2);\r\n    addNewBoxMesh(-2, 2, 2);\r\n\r\n    // middle rows\r\n    addNewBoxMesh(0, 0, 0);\r\n    addNewBoxMesh(2, 0, 0);\r\n    addNewBoxMesh(-2, 0, 0);\r\n    addNewBoxMesh(0, 0, -2);\r\n    addNewBoxMesh(2, 0, -2);\r\n    addNewBoxMesh(-2, 0, -2);\r\n    addNewBoxMesh(0, 0, 2);\r\n    addNewBoxMesh(2, 0, 2);\r\n    addNewBoxMesh(-2, 0, 2);\r\n\r\n    // bottom rows\r\n    addNewBoxMesh(0, -2, 0);\r\n    addNewBoxMesh(2, -2, 0);\r\n    addNewBoxMesh(-2, -2, 0);\r\n    addNewBoxMesh(0, -2, -2);\r\n    addNewBoxMesh(2, -2, -2);\r\n    addNewBoxMesh(-2, -2, -2);\r\n    addNewBoxMesh(0, -2, 2);\r\n    addNewBoxMesh(2, -2, 2);\r\n    addNewBoxMesh(-2, -2, 2);\r\n\r\n    // add shiba model\r\n    const glftLoader = new GLTFLoader();\r\n    glftLoader.load('./assets/shiba/scene.gltf', (gltfScene) => {\r\n      gltfScene.scene.position.y = 0.5;\r\n      gltfScene.scene.position.z = 4;\r\n      gltfScene.scene.scale.set(1, 1, 1);\r\n      test.scene.add(gltfScene.scene);\r\n    });\r\n\r\n    const pointer = new THREE.Vector2();\r\n    const raycaster = new THREE.Raycaster();\r\n\r\n    const onMouseMove = (event) => {\r\n      // calculate pointer position in normalized device coordinates\r\n      // (-1 to +1) for both components\r\n      pointer.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n      pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n      raycaster.setFromCamera(pointer, test.camera);\r\n      const intersects = raycaster.intersectObjects(test.scene.children);\r\n\r\n      // for (let i = 0; i < intersects.length; i++) {\r\n      //   console.log(intersects);\r\n      // }\r\n\r\n      // change color of objects intersecting the raycaster\r\n      // for (let i = 0; i < intersects.length; i++) {\r\n      //   intersects[i].object.material.color.set(0xff0000);\r\n      // }\r\n\r\n      // change color of the closest object intersecting the raycaster\r\n      if (intersects.length > 0) {\r\n        intersects[0].object.material.color.set(0xff0000);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('mousemove', onMouseMove);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <canvas id=\"myThreeJsCanvas\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Box;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}