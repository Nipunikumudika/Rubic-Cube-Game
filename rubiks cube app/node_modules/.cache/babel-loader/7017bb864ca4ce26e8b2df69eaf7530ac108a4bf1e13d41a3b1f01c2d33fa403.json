{"ast":null,"code":"import { Euler, EventDispatcher, Vector3 } from \"../../../build/three.module.js\";\nvar PointerLockControls = function (camera, domElement) {\n  if (domElement === undefined) {\n    console.warn('THREE.PointerLockControls: The second parameter \"domElement\" is now mandatory.');\n    domElement = document.body;\n  }\n  this.domElement = domElement;\n  this.isLocked = false;\n\n  // Set to constrain the pitch of the camera\n  // Range is 0 to Math.PI radians\n  this.minPolarAngle = 0; // radians\n  this.maxPolarAngle = Math.PI; // radians\n\n  //\n  // internals\n  //\n\n  var scope = this;\n  var changeEvent = {\n    type: 'change'\n  };\n  var lockEvent = {\n    type: 'lock'\n  };\n  var unlockEvent = {\n    type: 'unlock'\n  };\n  var euler = new Euler(0, 0, 0, 'YXZ');\n  var PI_2 = Math.PI / 2;\n  var vec = new Vector3();\n  function onMouseMove(event) {\n    if (scope.isLocked === false) return;\n    var movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n    var movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n    euler.setFromQuaternion(camera.quaternion);\n    euler.y -= movementX * 0.002;\n    euler.x -= movementY * 0.002;\n    euler.x = Math.max(PI_2 - scope.maxPolarAngle, Math.min(PI_2 - scope.minPolarAngle, euler.x));\n    camera.quaternion.setFromEuler(euler);\n    scope.dispatchEvent(changeEvent);\n  }\n  function onPointerlockChange() {\n    if (scope.domElement.ownerDocument.pointerLockElement === scope.domElement) {\n      scope.dispatchEvent(lockEvent);\n      scope.isLocked = true;\n    } else {\n      scope.dispatchEvent(unlockEvent);\n      scope.isLocked = false;\n    }\n  }\n  function onPointerlockError() {\n    console.error('THREE.PointerLockControls: Unable to use Pointer Lock API');\n  }\n  this.connect = function () {\n    scope.domElement.ownerDocument.addEventListener('mousemove', onMouseMove, false);\n    scope.domElement.ownerDocument.addEventListener('pointerlockchange', onPointerlockChange, false);\n    scope.domElement.ownerDocument.addEventListener('pointerlockerror', onPointerlockError, false);\n  };\n  this.disconnect = function () {\n    scope.domElement.ownerDocument.removeEventListener('mousemove', onMouseMove, false);\n    scope.domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerlockChange, false);\n    scope.domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerlockError, false);\n  };\n  this.dispose = function () {\n    this.disconnect();\n  };\n  this.getObject = function () {\n    // retaining this method for backward compatibility\n\n    return camera;\n  };\n  this.getDirection = function () {\n    var direction = new Vector3(0, 0, -1);\n    return function (v) {\n      return v.copy(direction).applyQuaternion(camera.quaternion);\n    };\n  }();\n  this.moveForward = function (distance) {\n    // move forward parallel to the xz-plane\n    // assumes camera.up is y-up\n\n    vec.setFromMatrixColumn(camera.matrix, 0);\n    vec.crossVectors(camera.up, vec);\n    camera.position.addScaledVector(vec, distance);\n  };\n  this.moveRight = function (distance) {\n    vec.setFromMatrixColumn(camera.matrix, 0);\n    camera.position.addScaledVector(vec, distance);\n  };\n  this.lock = function () {\n    this.domElement.requestPointerLock();\n  };\n  this.unlock = function () {\n    scope.domElement.ownerDocument.exitPointerLock();\n  };\n  this.connect();\n};\nPointerLockControls.prototype = Object.create(EventDispatcher.prototype);\nPointerLockControls.prototype.constructor = PointerLockControls;\nexport { PointerLockControls };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}