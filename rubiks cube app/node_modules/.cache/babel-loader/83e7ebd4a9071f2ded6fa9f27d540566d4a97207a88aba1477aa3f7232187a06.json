{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\LargerCube.js\",\n  _s = $RefreshSig$();\nimport { useRef } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LargeCube() {\n  _s();\n  const meshRef = useRef();\n  const {\n    camera,\n    raycaster,\n    mouse\n  } = useThree();\n  const handleClick = event => {\n    // Calculate mouse position in normalized device coordinates\n    const {\n      clientX,\n      clientY\n    } = event;\n    const rect = event.target.getBoundingClientRect();\n    const x = (clientX - rect.left) / rect.width * 2 - 1;\n    const y = -((clientY - rect.top) / rect.height) * 2 + 1;\n\n    // Set mouse position for raycaster\n    mouse.set(x, y);\n\n    // Raycast from the camera to the clicked point\n    raycaster.setFromCamera(mouse, camera);\n\n    // Check for intersections with the cube\n    const intersects = raycaster.intersectObject(meshRef.current);\n    if (intersects.length > 0) {\n      const faceIndex = intersects[0].faceIndex;\n      // Handle the click on the face with index faceIndex\n      console.log(\"Clicked on face:\", faceIndex);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    rotation: [Math.PI / 6, Math.PI / 4, 0],\n    onClick: handleClick,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      attach: \"geometry\",\n      args: [1.8, 1.8, 1.8]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attach: \"material\",\n      color: \"#6be092\",\n      wireframe: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(LargeCube, \"T8xfMMkAo/p9xwf9pNnq8b/PTIQ=\", false, function () {\n  return [useThree];\n});\n_c = LargeCube;\nexport default LargeCube;\nvar _c;\n$RefreshReg$(_c, \"LargeCube\");","map":{"version":3,"names":["useRef","useThree","THREE","jsxDEV","_jsxDEV","LargeCube","_s","meshRef","camera","raycaster","mouse","handleClick","event","clientX","clientY","rect","target","getBoundingClientRect","x","left","width","y","top","height","set","setFromCamera","intersects","intersectObject","current","length","faceIndex","console","log","ref","rotation","Math","PI","onClick","children","attach","args","fileName","_jsxFileName","lineNumber","columnNumber","color","wireframe","_c","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/LargerCube.js"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { useThree } from \"react-three-fiber\";\r\nimport * as THREE from 'three';\r\n\r\nfunction LargeCube() {\r\n  const meshRef = useRef();\r\n  const { camera, raycaster, mouse } = useThree();\r\n\r\n  const handleClick = (event) => {\r\n    // Calculate mouse position in normalized device coordinates\r\n    const { clientX, clientY } = event;\r\n    const rect = event.target.getBoundingClientRect();\r\n    const x = ((clientX - rect.left) / rect.width) * 2 - 1;\r\n    const y = -((clientY - rect.top) / rect.height) * 2 + 1;\r\n\r\n    // Set mouse position for raycaster\r\n    mouse.set(x, y);\r\n\r\n    // Raycast from the camera to the clicked point\r\n    raycaster.setFromCamera(mouse, camera);\r\n\r\n    // Check for intersections with the cube\r\n    const intersects = raycaster.intersectObject(meshRef.current);\r\n\r\n    if (intersects.length > 0) {\r\n      const faceIndex = intersects[0].faceIndex;\r\n      // Handle the click on the face with index faceIndex\r\n      console.log(\"Clicked on face:\", faceIndex);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <mesh\r\n      ref={meshRef}\r\n      rotation={[Math.PI / 6, Math.PI / 4, 0]}\r\n      onClick={handleClick}\r\n    >\r\n      <boxGeometry attach=\"geometry\" args={[1.8, 1.8, 1.8]} />\r\n      <meshStandardMaterial attach=\"material\" color=\"#6be092\" wireframe={true} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default LargeCube;\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,OAAO,GAAGP,MAAM,CAAC,CAAC;EACxB,MAAM;IAAEQ,MAAM;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAE/C,MAAMU,WAAW,GAAIC,KAAK,IAAK;IAC7B;IACA,MAAM;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGF,KAAK;IAClC,MAAMG,IAAI,GAAGH,KAAK,CAACI,MAAM,CAACC,qBAAqB,CAAC,CAAC;IACjD,MAAMC,CAAC,GAAI,CAACL,OAAO,GAAGE,IAAI,CAACI,IAAI,IAAIJ,IAAI,CAACK,KAAK,GAAI,CAAC,GAAG,CAAC;IACtD,MAAMC,CAAC,GAAG,EAAE,CAACP,OAAO,GAAGC,IAAI,CAACO,GAAG,IAAIP,IAAI,CAACQ,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;;IAEvD;IACAb,KAAK,CAACc,GAAG,CAACN,CAAC,EAAEG,CAAC,CAAC;;IAEf;IACAZ,SAAS,CAACgB,aAAa,CAACf,KAAK,EAAEF,MAAM,CAAC;;IAEtC;IACA,MAAMkB,UAAU,GAAGjB,SAAS,CAACkB,eAAe,CAACpB,OAAO,CAACqB,OAAO,CAAC;IAE7D,IAAIF,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MACzB,MAAMC,SAAS,GAAGJ,UAAU,CAAC,CAAC,CAAC,CAACI,SAAS;MACzC;MACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,SAAS,CAAC;IAC5C;EACF,CAAC;EAED,oBACE1B,OAAA;IACE6B,GAAG,EAAE1B,OAAQ;IACb2B,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC,EAAED,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAE;IACxCC,OAAO,EAAE1B,WAAY;IAAA2B,QAAA,gBAErBlC,OAAA;MAAamC,MAAM,EAAC,UAAU;MAACC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxDxC,OAAA;MAAsBmC,MAAM,EAAC,UAAU;MAACM,KAAK,EAAC,SAAS;MAACC,SAAS,EAAE;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEX;AAACtC,EAAA,CArCQD,SAAS;EAAA,QAEqBJ,QAAQ;AAAA;AAAA8C,EAAA,GAFtC1C,SAAS;AAuClB,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}