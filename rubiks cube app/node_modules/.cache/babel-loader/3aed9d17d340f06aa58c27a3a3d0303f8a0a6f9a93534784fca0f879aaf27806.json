{"ast":null,"code":"import { forwardRef, useState, useRef, useImperativeHandle, useEffect, createElement, cloneElement, Children } from 'react';\nimport { Flow } from 'three/examples/jsm/modifiers/CurveModifier';\nconst CurveModifier = /*#__PURE__*/forwardRef(({\n  children,\n  curve\n}, ref) => {\n  const [object3D, setObj] = useState();\n  const original = useRef();\n  const modifier = useRef();\n  useImperativeHandle(ref, () => ({\n    moveAlongCurve: val => {\n      var _modifier$current;\n      (_modifier$current = modifier.current) == null ? void 0 : _modifier$current.moveAlongCurve(val);\n    }\n  }));\n  useEffect(() => {\n    if (!modifier.current && original.current && ref) {\n      modifier.current = new Flow(original.current);\n      setObj(modifier.current.object3D);\n    }\n  }, [children, ref]);\n  useEffect(() => {\n    if (original.current && curve) {\n      var _modifier$current2;\n      (_modifier$current2 = modifier.current) == null ? void 0 : _modifier$current2.updateCurve(0, curve);\n    }\n  }, [curve]);\n  return object3D ? /*#__PURE__*/createElement(\"primitive\", {\n    object: object3D\n  }) : /*#__PURE__*/cloneElement(Children.only(children), {\n    ref: original\n  });\n});\nexport { CurveModifier };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}