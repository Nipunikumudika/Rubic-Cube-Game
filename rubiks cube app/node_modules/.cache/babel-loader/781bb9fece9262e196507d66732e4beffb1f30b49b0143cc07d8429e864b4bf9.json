{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\React rubik cube app\\\\Rubic-Cube-Game\\\\rubiks cube app\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { Suspense, useMemo, useRef, useState, useEffect } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader\";\nimport { useLoader } from \"react-three-fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RubiksCube = () => {\n  _s();\n  const {\n    scene\n  } = useLoader(GLTFLoader, \"/rubikcube.gltf\");\n  const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\n  scene.rotation.set(...initialRotation);\n  const controls = useRef();\n  const nodesSubset1 = useMemo(() => scene.children.slice(0, 9), [scene]); //only one layer\n  const nodesSubset2 = useMemo(() => scene.children.slice(9), [scene]); //two layers\n\n  const [rotationSubset1, setRotationSubset1] = useState(initialRotation);\n  const [rotationSubset2, setRotationSubset2] = useState(initialRotation);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      ref: controls,\n      enableZoom: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(\"group\", {\n        position: [0, 0, 0],\n        rotation: rotationSubset1,\n        children: /*#__PURE__*/_jsxDEV(RubiksCubeModel, {\n          nodesSubset: nodesSubset1,\n          rotation: rotationSubset1,\n          setRotation: setRotationSubset1,\n          controls: controls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n        position: [0, 0, 0],\n        rotation: rotationSubset1,\n        children: /*#__PURE__*/_jsxDEV(RubiksCubeModel, {\n          nodesSubset: nodesSubset2,\n          rotation: rotationSubset2,\n          setRotation: setRotationSubset2,\n          controls: controls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(RubiksCube, \"jsba6bx3Z4wrYGXhNQicP1I4E6w=\", false, function () {\n  return [useLoader];\n});\n_c = RubiksCube;\nconst RubiksCubeModel = ({\n  nodesSubset,\n  rotation,\n  setRotation,\n  controls\n}) => {\n  _s2();\n  const cubeRefs = useRef([]);\n  const startYRef = useRef(null);\n\n  // Store the initial rotation when the mouse is pressed\n  const initialRotationRef = useRef(rotation);\n\n  // Store the initial orbit controls rotation when the mouse is pressed\n  const initialOrbitRotationRef = useRef([0, 0, 0]);\n  const handlePointerDown = event => {\n    console.log(rotation);\n    console.log(\"down\");\n    startYRef.current = event.clientY;\n    initialRotationRef.current = rotation;\n    initialOrbitRotationRef.current = controls.current.getAzimuthalAngle(); // Save initial orbit controls rotation\n    window.addEventListener(\"pointermove\", handlePointerMove);\n    window.addEventListener(\"pointerup\", handlePointerUp);\n    event.stopPropagation();\n  };\n  let deltaY;\n  const handlePointerMove = event => {\n    console.log(\"move\");\n    const startY = startYRef.current;\n    if (startY !== null) {\n      deltaY = event.clientY - startY;\n    }\n  };\n  let targetRot = 0;\n  const handlePointerUp = async () => {\n    console.log(\"up\");\n    window.removeEventListener(\"pointermove\", handlePointerMove);\n    window.removeEventListener(\"pointerup\", handlePointerUp);\n\n    // Calculate the target rotation based on the initial rotation, orbit controls rotation, and mouse movement\n    const orbitRotation = controls.current.getAzimuthalAngle();\n    targetRot = initialRotationRef.current[2] + deltaY * 0.01 - (orbitRotation - initialOrbitRotationRef.current);\n    if (deltaY > 0) {\n      DraggingDown();\n      deltaY = 0;\n    } else if (deltaY < 0) {\n      DraggingUp();\n      deltaY = 0;\n    }\n  };\n  const DraggingDown = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z += Math.PI / 30;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n  };\n  const DraggingUp = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z -= Math.PI / 30;\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    });\n  };\n  useFrame(() => {\n    // Your animation logic here...\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    scale: [0.3, 0.3, 0.3],\n    onPointerDown: handlePointerDown,\n    children: nodesSubset.map((node, index) => /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: node,\n      ref: ref => cubeRefs.current[index] = {\n        current: ref\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s2(RubiksCubeModel, \"rP0Da7uv48WRl9mt+jf3HauM7iw=\", false, function () {\n  return [useFrame];\n});\n_c2 = RubiksCubeModel;\nexport default RubiksCube;\nvar _c, _c2;\n$RefreshReg$(_c, \"RubiksCube\");\n$RefreshReg$(_c2, \"RubiksCubeModel\");","map":{"version":3,"names":["React","Suspense","useMemo","useRef","useState","useEffect","Canvas","useFrame","GLTFLoader","useLoader","OrbitControls","jsxDEV","_jsxDEV","RubiksCube","_s","scene","initialRotation","Math","PI","rotation","set","controls","nodesSubset1","children","slice","nodesSubset2","rotationSubset1","setRotationSubset1","rotationSubset2","setRotationSubset2","fileName","_jsxFileName","lineNumber","columnNumber","ref","enableZoom","fallback","position","RubiksCubeModel","nodesSubset","setRotation","_c","_s2","cubeRefs","startYRef","initialRotationRef","initialOrbitRotationRef","handlePointerDown","event","console","log","current","clientY","getAzimuthalAngle","window","addEventListener","handlePointerMove","handlePointerUp","stopPropagation","deltaY","startY","targetRot","removeEventListener","orbitRotation","DraggingDown","DraggingUp","forEach","cubeRef","index","abs","z","Promise","resolve","requestAnimationFrame","setTimeout","scale","onPointerDown","map","node","object","_c2","$RefreshReg$"],"sources":["E:/projects/React rubik cube app/Rubic-Cube-Game/rubiks cube app/src/App.js"],"sourcesContent":["import React, { Suspense, useMemo, useRef, useState, useEffect } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader\";\nimport { useLoader } from \"react-three-fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport \"./App.css\";\n\nconst RubiksCube = () => {\n  const { scene } = useLoader(GLTFLoader, \"/rubikcube.gltf\");\n  const initialRotation = [Math.PI / 6, Math.PI / 4, 0];\n  scene.rotation.set(...initialRotation);\n  const controls = useRef();\n\n  const nodesSubset1 = useMemo(() => scene.children.slice(0, 9), [scene]); //only one layer\n  const nodesSubset2 = useMemo(() => scene.children.slice(9), [scene]); //two layers\n\n  const [rotationSubset1, setRotationSubset1] = useState(initialRotation);\n  const [rotationSubset2, setRotationSubset2] = useState(initialRotation);\n\n  return (\n    <Canvas>\n      <ambientLight />\n      <OrbitControls ref={controls} enableZoom={false} />\n      <Suspense fallback={null}>\n        <group position={[0, 0, 0]} rotation={rotationSubset1}>\n          <RubiksCubeModel\n            nodesSubset={nodesSubset1}\n            rotation={rotationSubset1}\n            setRotation={setRotationSubset1}\n            controls={controls}\n          />\n        </group>\n        <group position={[0, 0, 0]} rotation={rotationSubset1}>\n          <RubiksCubeModel\n            nodesSubset={nodesSubset2}\n            rotation={rotationSubset2}\n            setRotation={setRotationSubset2}\n            controls={controls}\n          />\n        </group>\n      </Suspense>\n      <pointLight position={[10, 10, 10]} />\n    </Canvas>\n  );\n};\n\nconst RubiksCubeModel = ({ nodesSubset, rotation, setRotation,controls }) => {\n  const cubeRefs = useRef([]);\n  const startYRef = useRef(null);\n\n    // Store the initial rotation when the mouse is pressed\n    const initialRotationRef = useRef(rotation);\n\n    // Store the initial orbit controls rotation when the mouse is pressed\n    const initialOrbitRotationRef = useRef([0, 0, 0]);\n\n    \n    const handlePointerDown = (event) => {\n      console.log(rotation);\n      console.log(\"down\");\n      startYRef.current = event.clientY;\n      initialRotationRef.current = rotation;\n      initialOrbitRotationRef.current = controls.current.getAzimuthalAngle(); // Save initial orbit controls rotation\n      window.addEventListener(\"pointermove\", handlePointerMove);\n      window.addEventListener(\"pointerup\", handlePointerUp);\n      event.stopPropagation();\n    };\n\n  let deltaY;\n\n  const handlePointerMove = (event) => {\n    console.log(\"move\");\n    const startY = startYRef.current;\n    if (startY !== null) {\n      deltaY = event.clientY - startY;\n    }\n  };\n  let targetRot=0;\n  const handlePointerUp = async () => {\n    console.log(\"up\");\n    window.removeEventListener(\"pointermove\", handlePointerMove);\n    window.removeEventListener(\"pointerup\", handlePointerUp);\n\n    // Calculate the target rotation based on the initial rotation, orbit controls rotation, and mouse movement\n    const orbitRotation = controls.current.getAzimuthalAngle();\n    targetRot = initialRotationRef.current[2] + deltaY * 0.01 - (orbitRotation - initialOrbitRotationRef.current);\n\n    if (deltaY > 0) {\n      DraggingDown();\n      deltaY = 0;\n    } else if (deltaY < 0) {\n      DraggingUp();\n      deltaY = 0;\n    }\n  };\n\n  const DraggingDown = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z += Math.PI / 30;\n        await new Promise((resolve) => requestAnimationFrame(resolve));\n        await new Promise((resolve) => setTimeout(resolve, 1));\n      }\n    });\n  };\n\n  const DraggingUp = async () => {\n    cubeRefs.current.forEach(async (cubeRef, index) => {\n      while (Math.abs(cubeRef.current.rotation.z - targetRot) >= 0.001) {\n        cubeRef.current.rotation.z -= Math.PI / 30;\n        await new Promise((resolve) => requestAnimationFrame(resolve));\n        await new Promise((resolve) => setTimeout(resolve, 1));\n      }\n    });\n  };\n\n  useFrame(() => {\n    // Your animation logic here...\n  });\n  \n  return (\n    <group scale={[0.3, 0.3, 0.3]} onPointerDown={handlePointerDown}>\n      {nodesSubset.map((node, index) => (\n        <primitive\n          key={index}\n          object={node}\n          ref={(ref) => (cubeRefs.current[index] = { current: ref })}\n        />\n      ))}\n    </group>\n  );\n};\n\nexport default RubiksCube;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}