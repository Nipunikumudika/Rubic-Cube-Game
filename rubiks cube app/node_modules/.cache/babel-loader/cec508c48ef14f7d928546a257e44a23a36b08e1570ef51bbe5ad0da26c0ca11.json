{"ast":null,"code":"import { OrthographicCamera, PlaneBufferGeometry, Mesh } from \"../../../build/three.module.js\";\nfunction Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n  this.renderToScreen = false;\n}\nObject.assign(Pass.prototype, {\n  setSize: function /* width, height */ () {},\n  render: function /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  () {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n  var FullScreenQuad = function (material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function () {\n      return this._mesh.material;\n    },\n    set: function (value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function () {\n      this._mesh.geometry.dispose();\n    },\n    render: function (renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\nexport { Pass };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}