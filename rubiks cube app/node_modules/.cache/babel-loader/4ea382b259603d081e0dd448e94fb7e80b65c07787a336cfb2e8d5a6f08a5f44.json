{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useMemo, createElement, Children } from 'react';\nimport { Reflector as Reflector$1 } from 'three/examples/jsm/objects/Reflector';\nconst Reflector = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n      children,\n      color,\n      textureWidth,\n      textureHeight,\n      clipBias,\n      shader,\n      encoding\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"color\", \"textureWidth\", \"textureHeight\", \"clipBias\", \"shader\", \"encoding\"]);\n  const reflector = useMemo(() => new Reflector$1(undefined, {\n    color,\n    textureWidth,\n    textureHeight,\n    clipBias,\n    shader,\n    encoding\n  }), [clipBias, color, encoding, shader, textureHeight, textureWidth]);\n  return /*#__PURE__*/createElement(\"primitive\", _extends({\n    dispose: undefined,\n    object: reflector,\n    ref: ref\n  }, props), Children.only(children));\n});\nexport { Reflector };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}