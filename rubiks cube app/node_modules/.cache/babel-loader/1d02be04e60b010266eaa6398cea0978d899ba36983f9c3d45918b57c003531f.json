{"ast":null,"code":"import { EventDispatcher, Quaternion, Vector3 } from \"../../../build/three.module.js\";\nvar FlyControls = function (object, domElement) {\n  if (domElement === undefined) {\n    console.warn('THREE.FlyControls: The second parameter \"domElement\" is now mandatory.');\n    domElement = document;\n  }\n  this.object = object;\n  this.domElement = domElement;\n  if (domElement) this.domElement.setAttribute('tabindex', -1);\n\n  // API\n\n  this.movementSpeed = 1.0;\n  this.rollSpeed = 0.005;\n  this.dragToLook = false;\n  this.autoForward = false;\n\n  // disable default target object behavior\n\n  // internals\n\n  var scope = this;\n  var changeEvent = {\n    type: \"change\"\n  };\n  var EPS = 0.000001;\n  this.tmpQuaternion = new Quaternion();\n  this.mouseStatus = 0;\n  this.moveState = {\n    up: 0,\n    down: 0,\n    left: 0,\n    right: 0,\n    forward: 0,\n    back: 0,\n    pitchUp: 0,\n    pitchDown: 0,\n    yawLeft: 0,\n    yawRight: 0,\n    rollLeft: 0,\n    rollRight: 0\n  };\n  this.moveVector = new Vector3(0, 0, 0);\n  this.rotationVector = new Vector3(0, 0, 0);\n  this.keydown = function (event) {\n    if (event.altKey) {\n      return;\n    }\n\n    //event.preventDefault();\n\n    switch (event.keyCode) {\n      case 16:\n        /* shift */this.movementSpeedMultiplier = .1;\n        break;\n      case 87:\n        /*W*/this.moveState.forward = 1;\n        break;\n      case 83:\n        /*S*/this.moveState.back = 1;\n        break;\n      case 65:\n        /*A*/this.moveState.left = 1;\n        break;\n      case 68:\n        /*D*/this.moveState.right = 1;\n        break;\n      case 82:\n        /*R*/this.moveState.up = 1;\n        break;\n      case 70:\n        /*F*/this.moveState.down = 1;\n        break;\n      case 38:\n        /*up*/this.moveState.pitchUp = 1;\n        break;\n      case 40:\n        /*down*/this.moveState.pitchDown = 1;\n        break;\n      case 37:\n        /*left*/this.moveState.yawLeft = 1;\n        break;\n      case 39:\n        /*right*/this.moveState.yawRight = 1;\n        break;\n      case 81:\n        /*Q*/this.moveState.rollLeft = 1;\n        break;\n      case 69:\n        /*E*/this.moveState.rollRight = 1;\n        break;\n    }\n    this.updateMovementVector();\n    this.updateRotationVector();\n  };\n  this.keyup = function (event) {\n    switch (event.keyCode) {\n      case 16:\n        /* shift */this.movementSpeedMultiplier = 1;\n        break;\n      case 87:\n        /*W*/this.moveState.forward = 0;\n        break;\n      case 83:\n        /*S*/this.moveState.back = 0;\n        break;\n      case 65:\n        /*A*/this.moveState.left = 0;\n        break;\n      case 68:\n        /*D*/this.moveState.right = 0;\n        break;\n      case 82:\n        /*R*/this.moveState.up = 0;\n        break;\n      case 70:\n        /*F*/this.moveState.down = 0;\n        break;\n      case 38:\n        /*up*/this.moveState.pitchUp = 0;\n        break;\n      case 40:\n        /*down*/this.moveState.pitchDown = 0;\n        break;\n      case 37:\n        /*left*/this.moveState.yawLeft = 0;\n        break;\n      case 39:\n        /*right*/this.moveState.yawRight = 0;\n        break;\n      case 81:\n        /*Q*/this.moveState.rollLeft = 0;\n        break;\n      case 69:\n        /*E*/this.moveState.rollRight = 0;\n        break;\n    }\n    this.updateMovementVector();\n    this.updateRotationVector();\n  };\n  this.mousedown = function (event) {\n    if (this.domElement !== document) {\n      this.domElement.focus();\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.dragToLook) {\n      this.mouseStatus++;\n    } else {\n      switch (event.button) {\n        case 0:\n          this.moveState.forward = 1;\n          break;\n        case 2:\n          this.moveState.back = 1;\n          break;\n      }\n      this.updateMovementVector();\n    }\n  };\n  this.mousemove = function (event) {\n    if (!this.dragToLook || this.mouseStatus > 0) {\n      var container = this.getContainerDimensions();\n      var halfWidth = container.size[0] / 2;\n      var halfHeight = container.size[1] / 2;\n      this.moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;\n      this.moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;\n      this.updateRotationVector();\n    }\n  };\n  this.mouseup = function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.dragToLook) {\n      this.mouseStatus--;\n      this.moveState.yawLeft = this.moveState.pitchDown = 0;\n    } else {\n      switch (event.button) {\n        case 0:\n          this.moveState.forward = 0;\n          break;\n        case 2:\n          this.moveState.back = 0;\n          break;\n      }\n      this.updateMovementVector();\n    }\n    this.updateRotationVector();\n  };\n  this.update = function () {\n    var lastQuaternion = new Quaternion();\n    var lastPosition = new Vector3();\n    return function (delta) {\n      var moveMult = delta * scope.movementSpeed;\n      var rotMult = delta * scope.rollSpeed;\n      scope.object.translateX(scope.moveVector.x * moveMult);\n      scope.object.translateY(scope.moveVector.y * moveMult);\n      scope.object.translateZ(scope.moveVector.z * moveMult);\n      scope.tmpQuaternion.set(scope.rotationVector.x * rotMult, scope.rotationVector.y * rotMult, scope.rotationVector.z * rotMult, 1).normalize();\n      scope.object.quaternion.multiply(scope.tmpQuaternion);\n      if (lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n        scope.dispatchEvent(changeEvent);\n        lastQuaternion.copy(scope.object.quaternion);\n        lastPosition.copy(scope.object.position);\n      }\n    };\n  }();\n  this.updateMovementVector = function () {\n    var forward = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;\n    this.moveVector.x = -this.moveState.left + this.moveState.right;\n    this.moveVector.y = -this.moveState.down + this.moveState.up;\n    this.moveVector.z = -forward + this.moveState.back;\n\n    //console.log( 'move:', [ this.moveVector.x, this.moveVector.y, this.moveVector.z ] );\n  };\n  this.updateRotationVector = function () {\n    this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;\n    this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;\n    this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;\n\n    //console.log( 'rotate:', [ this.rotationVector.x, this.rotationVector.y, this.rotationVector.z ] );\n  };\n  this.getContainerDimensions = function () {\n    if (this.domElement != document) {\n      return {\n        size: [this.domElement.offsetWidth, this.domElement.offsetHeight],\n        offset: [this.domElement.offsetLeft, this.domElement.offsetTop]\n      };\n    } else {\n      return {\n        size: [window.innerWidth, window.innerHeight],\n        offset: [0, 0]\n      };\n    }\n  };\n  function bind(scope, fn) {\n    return function () {\n      fn.apply(scope, arguments);\n    };\n  }\n  function contextmenu(event) {\n    event.preventDefault();\n  }\n  this.dispose = function () {\n    this.domElement.removeEventListener('contextmenu', contextmenu, false);\n    this.domElement.removeEventListener('mousedown', _mousedown, false);\n    this.domElement.removeEventListener('mousemove', _mousemove, false);\n    this.domElement.removeEventListener('mouseup', _mouseup, false);\n    window.removeEventListener('keydown', _keydown, false);\n    window.removeEventListener('keyup', _keyup, false);\n  };\n  var _mousemove = bind(this, this.mousemove);\n  var _mousedown = bind(this, this.mousedown);\n  var _mouseup = bind(this, this.mouseup);\n  var _keydown = bind(this, this.keydown);\n  var _keyup = bind(this, this.keyup);\n  this.domElement.addEventListener('contextmenu', contextmenu, false);\n  this.domElement.addEventListener('mousemove', _mousemove, false);\n  this.domElement.addEventListener('mousedown', _mousedown, false);\n  this.domElement.addEventListener('mouseup', _mouseup, false);\n  window.addEventListener('keydown', _keydown, false);\n  window.addEventListener('keyup', _keyup, false);\n  this.updateMovementVector();\n  this.updateRotationVector();\n};\nFlyControls.prototype = Object.create(EventDispatcher.prototype);\nFlyControls.prototype.constructor = FlyControls;\nexport { FlyControls };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}